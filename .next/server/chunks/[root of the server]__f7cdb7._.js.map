{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 143, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/data/db.ts"],"sourcesContent":["import mysql from 'mysql2/promise';\r\n\r\n// Create a connection pool for MySQL\r\nconst pool = mysql.createPool({\r\n  host: process.env.DB_HOST || 'localhost', // Replace with your MySQL host\r\n  user: process.env.DB_USER || 'root', // Replace with your MySQL username\r\n  password: process.env.DB_PASSWORD || '#InsideOut6', // Replace with your MySQL password\r\n  database: process.env.DB_NAME || 'timecapsuledbs', // Replace with your database name\r\n  waitForConnections: true,\r\n  connectionLimit: 10,\r\n  queueLimit: 0,\r\n});\r\n\r\nexport default pool;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,qCAAqC;AACrC,MAAM,OAAO,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;IAC5B,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,UAAU,QAAQ,GAAG,CAAC,WAAW,IAAI;IACrC,UAAU,QAAQ,GAAG,CAAC,OAAO,IAAI;IACjC,oBAAoB;IACpB,iBAAiB;IACjB,YAAY;AACd;uCAEe"}},
    {"offset": {"line": 159, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 165, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/app/api/getUserProfile/route.ts"],"sourcesContent":["// /api/getUserProfile.ts\r\nimport { NextResponse } from \"next/server\";\r\nimport db from \"../../../data/db\";\r\n\r\n// This API route needs to handle getting the logged-in user profile.\r\nexport async function GET(req: Request) {\r\n  try {\r\n    // Get username from query params or cookies (depending on how the user is authenticated)\r\n    const url = new URL(req.url);\r\n    const username = url.searchParams.get(\"username\"); // If using query params\r\n\r\n    if (!username) {\r\n      return NextResponse.json(\r\n        { error: \"Username is required\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Fetch user data from the database\r\n    const [rows]: [any, any] = await db.query(\r\n      \"SELECT * FROM users WHERE username = ?\",\r\n      [username]\r\n    );\r\n\r\n    // Ensure that 'rows' is an array before accessing its properties\r\n    if (Array.isArray(rows) && rows.length > 0) {\r\n      const user = rows[0]; // Access the first result from the rows\r\n\r\n      const maskedPassword = \"*****\";\r\n      // Send the user profile data back\r\n      return NextResponse.json({\r\n        username: user.username,\r\n        firstName: user.first_name,\r\n        lastName: user.last_name,\r\n        email: user.email,\r\n        password: maskedPassword,\r\n      });\r\n    } else {\r\n      return NextResponse.json({ error: \"User not found\" }, { status: 404 });\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error fetching user profile:\", error);\r\n    return NextResponse.json({ error: \"Server error\" }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":"AAAA,yBAAyB;;;;AACzB;AACA;;;AAGO,eAAe,IAAI,GAAY;IACpC,IAAI;QACF,yFAAyF;QACzF,MAAM,MAAM,IAAI,IAAI,IAAI,GAAG;QAC3B,MAAM,WAAW,IAAI,YAAY,CAAC,GAAG,CAAC,aAAa,wBAAwB;QAE3E,IAAI,CAAC,UAAU;YACb,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAuB,GAChC;gBAAE,QAAQ;YAAI;QAElB;QAEA,oCAAoC;QACpC,MAAM,CAAC,KAAK,GAAe,MAAM,mHAAA,CAAA,UAAE,CAAC,KAAK,CACvC,0CACA;YAAC;SAAS;QAGZ,iEAAiE;QACjE,IAAI,MAAM,OAAO,CAAC,SAAS,KAAK,MAAM,GAAG,GAAG;YAC1C,MAAM,OAAO,IAAI,CAAC,EAAE,EAAE,wCAAwC;YAE9D,MAAM,iBAAiB;YACvB,kCAAkC;YAClC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,UAAU,KAAK,QAAQ;gBACvB,WAAW,KAAK,UAAU;gBAC1B,UAAU,KAAK,SAAS;gBACxB,OAAO,KAAK,KAAK;gBACjB,UAAU;YACZ;QACF,OAAO;YACL,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAiB,GAAG;gBAAE,QAAQ;YAAI;QACtE;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAe,GAAG;YAAE,QAAQ;QAAI;IACpE;AACF"}},
    {"offset": {"line": 217, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}