{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 143, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/data/db.ts"],"sourcesContent":["import mysql from 'mysql2/promise';\r\n\r\n// Create a connection pool for MySQL\r\nconst pool = mysql.createPool({\r\n  host: process.env.DB_HOST || 'localhost', // Replace with your MySQL host\r\n  user: process.env.DB_USER || 'root', // Replace with your MySQL username\r\n  password: process.env.DB_PASSWORD || '#InsideOut6', // Replace with your MySQL password\r\n  database: process.env.DB_NAME || 'timecapsuledbs', // Replace with your database name\r\n  waitForConnections: true,\r\n  connectionLimit: 10,\r\n  queueLimit: 0,\r\n});\r\n\r\nexport default pool;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,qCAAqC;AACrC,MAAM,OAAO,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;IAC5B,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,UAAU,QAAQ,GAAG,CAAC,WAAW,IAAI;IACrC,UAAU,QAAQ,GAAG,CAAC,OAAO,IAAI;IACjC,oBAAoB;IACpB,iBAAiB;IACjB,YAAY;AACd;uCAEe"}},
    {"offset": {"line": 159, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 165, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/app/api/capsuleContents/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\r\nimport db from \"../../../data/db\";\r\n\r\nexport async function GET(req: NextRequest) {\r\n  try {\r\n    const url = req.nextUrl;\r\n    const capsuleName = url.searchParams.get(\"capsuleName\");\r\n\r\n    if (!capsuleName) {\r\n      return NextResponse.json({ message: \"Capsule name is required\" }, { status: 400 });\r\n    }\r\n\r\n    // Fetch capsule ID\r\n    const capsuleQuery = `\r\n      SELECT capsule_id\r\n      FROM time_capsules\r\n      WHERE capsule_name = ? AND status = 'delivered'\r\n    `;\r\n    const [capsuleDetails]: [any[], any] = await db.query(capsuleQuery, [capsuleName]);\r\n\r\n    if (capsuleDetails.length === 0) {\r\n      return NextResponse.json({ message: \"Capsule not found or not delivered\" }, { status: 404 });\r\n    }\r\n\r\n    const capsuleId = capsuleDetails[0].capsule_id;\r\n\r\n    // Fetch capsule contents\r\n    const contentQuery = `\r\n      SELECT content_type, TO_BASE64(content_data) AS content_data\r\n      FROM capsule_contents\r\n      WHERE capsule_id = ?\r\n    `;\r\n    const [contents]: [any[], any] = await db.query(contentQuery, [capsuleId]);\r\n\r\n    return NextResponse.json(contents);\r\n  } catch (error) {\r\n    console.error(error);\r\n    return NextResponse.json({ message: \"Error fetching capsule contents\" }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe,IAAI,GAAgB;IACxC,IAAI;QACF,MAAM,MAAM,IAAI,OAAO;QACvB,MAAM,cAAc,IAAI,YAAY,CAAC,GAAG,CAAC;QAEzC,IAAI,CAAC,aAAa;YAChB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAA2B,GAAG;gBAAE,QAAQ;YAAI;QAClF;QAEA,mBAAmB;QACnB,MAAM,eAAe,CAAC;;;;IAItB,CAAC;QACD,MAAM,CAAC,eAAe,GAAiB,MAAM,mHAAA,CAAA,UAAE,CAAC,KAAK,CAAC,cAAc;YAAC;SAAY;QAEjF,IAAI,eAAe,MAAM,KAAK,GAAG;YAC/B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAAqC,GAAG;gBAAE,QAAQ;YAAI;QAC5F;QAEA,MAAM,YAAY,cAAc,CAAC,EAAE,CAAC,UAAU;QAE9C,yBAAyB;QACzB,MAAM,eAAe,CAAC;;;;IAItB,CAAC;QACD,MAAM,CAAC,SAAS,GAAiB,MAAM,mHAAA,CAAA,UAAE,CAAC,KAAK,CAAC,cAAc;YAAC;SAAU;QAEzE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAkC,GAAG;YAAE,QAAQ;QAAI;IACzF;AACF"}},
    {"offset": {"line": 219, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}