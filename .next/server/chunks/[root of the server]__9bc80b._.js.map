{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 143, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/data/db.ts"],"sourcesContent":["import mysql from 'mysql2/promise';\r\n\r\n// Create a connection pool for MySQL\r\nconst pool = mysql.createPool({\r\n  host: process.env.DB_HOST || 'localhost', // Replace with your MySQL host\r\n  user: process.env.DB_USER || 'root', // Replace with your MySQL username\r\n  password: process.env.DB_PASSWORD || '#InsideOut6', // Replace with your MySQL password\r\n  database: process.env.DB_NAME || 'timecapsuledbs', // Replace with your database name\r\n  waitForConnections: true,\r\n  connectionLimit: 10,\r\n  queueLimit: 0,\r\n});\r\n\r\nexport default pool;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,qCAAqC;AACrC,MAAM,OAAO,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;IAC5B,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,UAAU,QAAQ,GAAG,CAAC,WAAW,IAAI;IACrC,UAAU,QAAQ,GAAG,CAAC,OAAO,IAAI;IACjC,oBAAoB;IACpB,iBAAiB;IACjB,YAAY;AACd;uCAEe"}},
    {"offset": {"line": 159, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 165, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/app/api/addContents/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport db from \"../../../data/db\";\r\nimport { RowDataPacket } from \"mysql2\";\r\n\r\nexport async function POST(req: Request) {\r\n  try {\r\n    const formData = await req.formData();\r\n    const capsuleName = formData.get(\"capsule_name\") as string;\r\n    const username = formData.get(\"username\") as string;\r\n    const content = formData.get(\"content\"); // Expecting only one file\r\n\r\n    // Validate input\r\n    if (!capsuleName || !username || !content) {\r\n      return NextResponse.json(\r\n        { error: \"Capsule name, username, and content are required\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    type UserResult = {\r\n      user_id: number;\r\n    };\r\n\r\n    const [userResult] = await db.execute<RowDataPacket[]>(\r\n      `SELECT user_id FROM users WHERE username = ?`,\r\n      [username]\r\n    );\r\n\r\n    if (userResult.length === 0) {\r\n      throw new Error(\"User  not found\");\r\n    }\r\n\r\n    const user_id = (userResult[0] as UserResult).user_id;\r\n\r\n    const [capsuleResult] = await db.execute<RowDataPacket[]>(\r\n      `SELECT capsule_id FROM time_capsules WHERE capsule_name = ? AND user_id = ?`,\r\n      [capsuleName, user_id]\r\n    );\r\n\r\n    if (!capsuleResult || capsuleResult.length === 0) {\r\n      return NextResponse.json(\r\n        { error: \"Capsule not found for the given name and user\" },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    const capsule_id = capsuleResult[0].capsule_id;\r\n\r\n    // Handle image content\r\n    if (content instanceof File) {\r\n      const content_data = Buffer.from(await content.arrayBuffer());\r\n      const content_size = content_data.byteLength;\r\n\r\n      if (content_size > 52428800) {\r\n        return NextResponse.json(\r\n          { error: \"File size exceeds 50MB limit\" },\r\n          { status: 400 }\r\n        );\r\n      }\r\n\r\n      // Insert image content into the database\r\n      await db.execute(\r\n        `INSERT INTO capsule_contents (capsule_id, content_type, content_data, content_size)\r\n         VALUES (?, 'image', ?, ?)`, // Hardcoded 'image' as per your requirement\r\n        [capsule_id, content_data, content_size]\r\n      );\r\n\r\n      return NextResponse.json({ message: \"Image content added successfully\", capsule_id });\r\n    }\r\n\r\n    return NextResponse.json(\r\n      { error: \"Invalid content type\" },\r\n      { status: 400 }\r\n    );\r\n  } catch (error) {\r\n    console.error(\"Error uploading content:\", error);\r\n    return NextResponse.json({ error: \"Server error\" }, { status: 500 });\r\n  }\r\n}"],"names":[],"mappings":";;;AAAA;AACA;;;AAGO,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,WAAW,MAAM,IAAI,QAAQ;QACnC,MAAM,cAAc,SAAS,GAAG,CAAC;QACjC,MAAM,WAAW,SAAS,GAAG,CAAC;QAC9B,MAAM,UAAU,SAAS,GAAG,CAAC,YAAY,0BAA0B;QAEnE,iBAAiB;QACjB,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,SAAS;YACzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAmD,GAC5D;gBAAE,QAAQ;YAAI;QAElB;QAMA,MAAM,CAAC,WAAW,GAAG,MAAM,mHAAA,CAAA,UAAE,CAAC,OAAO,CACnC,CAAC,4CAA4C,CAAC,EAC9C;YAAC;SAAS;QAGZ,IAAI,WAAW,MAAM,KAAK,GAAG;YAC3B,MAAM,IAAI,MAAM;QAClB;QAEA,MAAM,UAAU,AAAC,UAAU,CAAC,EAAE,CAAgB,OAAO;QAErD,MAAM,CAAC,cAAc,GAAG,MAAM,mHAAA,CAAA,UAAE,CAAC,OAAO,CACtC,CAAC,2EAA2E,CAAC,EAC7E;YAAC;YAAa;SAAQ;QAGxB,IAAI,CAAC,iBAAiB,cAAc,MAAM,KAAK,GAAG;YAChD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAgD,GACzD;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,aAAa,aAAa,CAAC,EAAE,CAAC,UAAU;QAE9C,uBAAuB;QACvB,IAAI,mBAAmB,MAAM;YAC3B,MAAM,eAAe,OAAO,IAAI,CAAC,MAAM,QAAQ,WAAW;YAC1D,MAAM,eAAe,aAAa,UAAU;YAE5C,IAAI,eAAe,UAAU;gBAC3B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;oBAAE,OAAO;gBAA+B,GACxC;oBAAE,QAAQ;gBAAI;YAElB;YAEA,yCAAyC;YACzC,MAAM,mHAAA,CAAA,UAAE,CAAC,OAAO,CACd,CAAC;kCACyB,CAAC,EAC3B;gBAAC;gBAAY;gBAAc;aAAa;YAG1C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;gBAAoC;YAAW;QACrF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAuB,GAChC;YAAE,QAAQ;QAAI;IAElB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAe,GAAG;YAAE,QAAQ;QAAI;IACpE;AACF"}},
    {"offset": {"line": 242, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}