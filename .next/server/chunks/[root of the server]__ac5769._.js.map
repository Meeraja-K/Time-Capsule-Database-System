{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 143, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/data/db.ts"],"sourcesContent":["import mysql from 'mysql2/promise';\r\n\r\n// Create a connection pool for MySQL\r\nconst pool = mysql.createPool({\r\n  host: process.env.DB_HOST || 'localhost', // Replace with your MySQL host\r\n  user: process.env.DB_USER || 'root', // Replace with your MySQL username\r\n  password: process.env.DB_PASSWORD || '#InsideOut6', // Replace with your MySQL password\r\n  database: process.env.DB_NAME || 'timecapsuledbs', // Replace with your database name\r\n  waitForConnections: true,\r\n  connectionLimit: 10,\r\n  queueLimit: 0,\r\n});\r\n\r\nexport default pool;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,qCAAqC;AACrC,MAAM,OAAO,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;IAC5B,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,UAAU,QAAQ,GAAG,CAAC,WAAW,IAAI;IACrC,UAAU,QAAQ,GAAG,CAAC,OAAO,IAAI;IACjC,oBAAoB;IACpB,iBAAiB;IACjB,YAAY;AACd;uCAEe"}},
    {"offset": {"line": 159, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 165, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/app/api/getTimeCapsules/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport db from \"../../../data/db\"; // Update this path as needed\r\n\r\nexport async function GET(req: Request) {\r\n  try {\r\n    // Parse the query parameters\r\n    const url = new URL(req.url);\r\n    const username = url.searchParams.get(\"username\");\r\n\r\n    if (!username) {\r\n      return NextResponse.json(\r\n        { error: \"Username is required\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    console.log(\"Fetching time capsules for username:\", username);\r\n\r\n    // Fetch the created capsules\r\n    const [createdCapsules]: [any[], any] = await db.query(\r\n      `\r\n      SELECT tc.capsule_id, tc.capsule_name, tc.status\r\n      FROM users u\r\n      INNER JOIN time_capsules tc ON u.user_id = tc.user_id\r\n      WHERE u.username = ?`,\r\n      [username]\r\n    );\r\n\r\n    // Fetch the received capsules (excluding those already created by the user)\r\n    const [receivedCapsules]: [any[], any] = await db.query(\r\n      `\r\n      SELECT tc.capsule_id, tc.capsule_name, tc.status\r\n      FROM received_capsules rc\r\n      INNER JOIN time_capsules tc ON rc.capsule_id = tc.capsule_id\r\n      WHERE rc.receiver_username = ?`,\r\n      [username]\r\n    );\r\n\r\n    // Update the status of received capsules to 'received' while preserving other details\r\n    const updatedReceivedCapsules = receivedCapsules.map(capsule => ({\r\n      ...capsule,\r\n      status: 'received' // Explicitly set status as 'received' for received capsules\r\n    }));\r\n\r\n    // Now combine the created capsules and updated received capsules\r\n    // Ensure no duplicates and keep the status of created capsules intact\r\n    const allCapsules = [\r\n      ...createdCapsules,\r\n      ...updatedReceivedCapsules.filter(receivedCapsule => \r\n        !createdCapsules.some(createdCapsule => createdCapsule.capsule_id === receivedCapsule.capsule_id)\r\n      )\r\n    ];\r\n\r\n    // Fetch the total count of unique capsules (both created and received)\r\n    const [totalCountResult]: [any[], any] = await db.query(\r\n      `\r\n      SELECT COUNT(DISTINCT capsule_id) AS totalCount\r\n      FROM (\r\n        SELECT tc.capsule_id\r\n        FROM users u\r\n        INNER JOIN time_capsules tc ON u.user_id = tc.user_id\r\n        WHERE u.username = ?\r\n        UNION ALL\r\n        SELECT tc.capsule_id\r\n        FROM received_capsules rc\r\n        INNER JOIN time_capsules tc ON rc.capsule_id = tc.capsule_id\r\n        WHERE rc.receiver_username = ?\r\n      ) AS combined_capsules`,\r\n      [username, username]\r\n    );\r\n\r\n    const totalCount = totalCountResult[0]?.totalCount || 0;\r\n\r\n    if (allCapsules.length === 0) {\r\n      return NextResponse.json(\r\n        { error: \"No time capsules found for the user.\" },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    // Return both created and received capsules and the count\r\n    return NextResponse.json({ capsules: allCapsules, totalCount }, { status: 200 });\r\n  } catch (error) {\r\n    console.error(\"Error fetching time capsules:\", error);\r\n    return NextResponse.json(\r\n      { error: \"Internal server error\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA,qMAAmC,6BAA6B;;;AAEzD,eAAe,IAAI,GAAY;IACpC,IAAI;QACF,6BAA6B;QAC7B,MAAM,MAAM,IAAI,IAAI,IAAI,GAAG;QAC3B,MAAM,WAAW,IAAI,YAAY,CAAC,GAAG,CAAC;QAEtC,IAAI,CAAC,UAAU;YACb,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAuB,GAChC;gBAAE,QAAQ;YAAI;QAElB;QAEA,QAAQ,GAAG,CAAC,wCAAwC;QAEpD,6BAA6B;QAC7B,MAAM,CAAC,gBAAgB,GAAiB,MAAM,mHAAA,CAAA,UAAE,CAAC,KAAK,CACpD,CAAC;;;;0BAImB,CAAC,EACrB;YAAC;SAAS;QAGZ,4EAA4E;QAC5E,MAAM,CAAC,iBAAiB,GAAiB,MAAM,mHAAA,CAAA,UAAE,CAAC,KAAK,CACrD,CAAC;;;;oCAI6B,CAAC,EAC/B;YAAC;SAAS;QAGZ,sFAAsF;QACtF,MAAM,0BAA0B,iBAAiB,GAAG,CAAC,CAAA,UAAW,CAAC;gBAC/D,GAAG,OAAO;gBACV,QAAQ,WAAW,4DAA4D;YACjF,CAAC;QAED,iEAAiE;QACjE,sEAAsE;QACtE,MAAM,cAAc;eACf;eACA,wBAAwB,MAAM,CAAC,CAAA,kBAChC,CAAC,gBAAgB,IAAI,CAAC,CAAA,iBAAkB,eAAe,UAAU,KAAK,gBAAgB,UAAU;SAEnG;QAED,uEAAuE;QACvE,MAAM,CAAC,iBAAiB,GAAiB,MAAM,mHAAA,CAAA,UAAE,CAAC,KAAK,CACrD,CAAC;;;;;;;;;;;;4BAYqB,CAAC,EACvB;YAAC;YAAU;SAAS;QAGtB,MAAM,aAAa,gBAAgB,CAAC,EAAE,EAAE,cAAc;QAEtD,IAAI,YAAY,MAAM,KAAK,GAAG;YAC5B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAuC,GAChD;gBAAE,QAAQ;YAAI;QAElB;QAEA,0DAA0D;QAC1D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,UAAU;YAAa;QAAW,GAAG;YAAE,QAAQ;QAAI;IAChF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iCAAiC;QAC/C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 253, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}