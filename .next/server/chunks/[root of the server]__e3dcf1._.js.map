{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 143, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/app/data/db.ts"],"sourcesContent":["import mysql from 'mysql2/promise';\r\n\r\n// Create a connection pool for MySQL\r\nconst pool = mysql.createPool({\r\n  host: process.env.DB_HOST || 'localhost', // Replace with your MySQL host\r\n  user: process.env.DB_USER || 'root', // Replace with your MySQL username\r\n  password: process.env.DB_PASSWORD || '#InsideOut6', // Replace with your MySQL password\r\n  database: process.env.DB_NAME || 'timecapsuledbs', // Replace with your database name\r\n  waitForConnections: true,\r\n  connectionLimit: 10,\r\n  queueLimit: 0,\r\n});\r\n\r\nexport default pool;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,qCAAqC;AACrC,MAAM,OAAO,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;IAC5B,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,UAAU,QAAQ,GAAG,CAAC,WAAW,IAAI;IACrC,UAAU,QAAQ,GAAG,CAAC,OAAO,IAAI;IACjC,oBAAoB;IACpB,iBAAiB;IACjB,YAAY;AACd;uCAEe"}},
    {"offset": {"line": 159, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 165, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/app/api/register/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\r\nimport db from '../../data/db';\r\n\r\nexport async function POST(req: Request) {\r\n  try {\r\n    const body = await req.json();\r\n    const { fullName, lastName, email, username, password } = body;\r\n\r\n    // Validate input\r\n    if (!fullName || !lastName || !email || !username || !password) {\r\n      return NextResponse.json({ error: 'All fields are required' }, { status: 400 });\r\n    }\r\n\r\n    // Check if the email or username already exists\r\n    const [rows] = await db.query(\r\n      'SELECT * FROM users WHERE email = ? OR username = ?',\r\n      [email, username]\r\n    );\r\n\r\n    if ((rows as any[]).length > 0) {\r\n      return NextResponse.json(\r\n        { error: 'Email or username already exists' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Insert the new user into the database without hashing the password\r\n    await db.query(\r\n      'INSERT INTO users (first_name, last_name, email, username, password_hash) VALUES (?, ?, ?, ?, ?)',\r\n      [fullName, lastName, email, username, password]\r\n    );\r\n\r\n    return NextResponse.json({ message: 'User registered successfully' });\r\n  } catch (error) {\r\n    console.error('Error registering user:', error);\r\n    return NextResponse.json({ error: 'Server error' }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,OAAO,MAAM,IAAI,IAAI;QAC3B,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG;QAE1D,iBAAiB;QACjB,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,SAAS,CAAC,YAAY,CAAC,UAAU;YAC9D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA0B,GAAG;gBAAE,QAAQ;YAAI;QAC/E;QAEA,gDAAgD;QAChD,MAAM,CAAC,KAAK,GAAG,MAAM,0HAAA,CAAA,UAAE,CAAC,KAAK,CAC3B,uDACA;YAAC;YAAO;SAAS;QAGnB,IAAI,AAAC,KAAe,MAAM,GAAG,GAAG;YAC9B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAmC,GAC5C;gBAAE,QAAQ;YAAI;QAElB;QAEA,qEAAqE;QACrE,MAAM,0HAAA,CAAA,UAAE,CAAC,KAAK,CACZ,oGACA;YAAC;YAAU;YAAU;YAAO;YAAU;SAAS;QAGjD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAA+B;IACrE,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAe,GAAG;YAAE,QAAQ;QAAI;IACpE;AACF"}},
    {"offset": {"line": 216, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}