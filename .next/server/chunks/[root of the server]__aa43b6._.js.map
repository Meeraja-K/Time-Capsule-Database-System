{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 143, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/data/db.ts"],"sourcesContent":["import mysql from 'mysql2/promise';\r\n\r\n// Create a connection pool for MySQL\r\nconst pool = mysql.createPool({\r\n  host: process.env.DB_HOST || 'localhost', // Replace with your MySQL host\r\n  user: process.env.DB_USER || 'root', // Replace with your MySQL username\r\n  password: process.env.DB_PASSWORD || '#InsideOut6', // Replace with your MySQL password\r\n  database: process.env.DB_NAME || 'timecapsuledbs', // Replace with your database name\r\n  waitForConnections: true,\r\n  connectionLimit: 10,\r\n  queueLimit: 0,\r\n});\r\n\r\nexport default pool;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,qCAAqC;AACrC,MAAM,OAAO,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;IAC5B,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,UAAU,QAAQ,GAAG,CAAC,WAAW,IAAI;IACrC,UAAU,QAAQ,GAAG,CAAC,OAAO,IAAI;IACjC,oBAAoB;IACpB,iBAAiB;IACjB,YAAY;AACd;uCAEe"}},
    {"offset": {"line": 159, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 165, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/app/api/login/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport db from \"../../../data/db\";\r\nimport { RowDataPacket } from \"mysql2\";\r\n\r\nexport async function POST(req: Request) {\r\n  try {\r\n    const body = await req.json();\r\n    const { username, password } = body;\r\n\r\n    // Validate input\r\n    if (!username || !password) {\r\n      return NextResponse.json(\r\n        { error: \"Username and password are required\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Find user (explicitly typing the query result)\r\n    const [rows] = await db.query<RowDataPacket[]>(\r\n      \"SELECT * FROM users WHERE username = ?\",\r\n      [username]\r\n    );\r\n\r\n    // Ensure rows is an array and validate password\r\n    if (rows.length === 0 || rows[0].password_hash !== password) {\r\n      console.log(\"Query result:\", rows);\r\n      return NextResponse.json(\r\n        { error: \"Invalid credentials\" },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    // Check if the username is the admin (hardcoded)\r\n    const user = rows[0];\r\n    const isAdmin = user.username === \"admin\"; // Assuming admin's username is \"admin\"\r\n\r\n    // Successful login\r\n    return NextResponse.json({\r\n      message: \"Login successful\",\r\n      user: {\r\n        username: user.username,\r\n        isAdmin: isAdmin, // Add a flag indicating whether the user is an admin\r\n      },\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error logging in user:\", error);\r\n    return NextResponse.json({ error: \"Server error\" }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAGO,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,OAAO,MAAM,IAAI,IAAI;QAC3B,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG;QAE/B,iBAAiB;QACjB,IAAI,CAAC,YAAY,CAAC,UAAU;YAC1B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAqC,GAC9C;gBAAE,QAAQ;YAAI;QAElB;QAEA,iDAAiD;QACjD,MAAM,CAAC,KAAK,GAAG,MAAM,mHAAA,CAAA,UAAE,CAAC,KAAK,CAC3B,0CACA;YAAC;SAAS;QAGZ,gDAAgD;QAChD,IAAI,KAAK,MAAM,KAAK,KAAK,IAAI,CAAC,EAAE,CAAC,aAAa,KAAK,UAAU;YAC3D,QAAQ,GAAG,CAAC,iBAAiB;YAC7B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAsB,GAC/B;gBAAE,QAAQ;YAAI;QAElB;QAEA,iDAAiD;QACjD,MAAM,OAAO,IAAI,CAAC,EAAE;QACpB,MAAM,UAAU,KAAK,QAAQ,KAAK,SAAS,uCAAuC;QAElF,mBAAmB;QACnB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,MAAM;gBACJ,UAAU,KAAK,QAAQ;gBACvB,SAAS;YACX;QACF;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,0BAA0B;QACxC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAe,GAAG;YAAE,QAAQ;QAAI;IACpE;AACF"}},
    {"offset": {"line": 217, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}