{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 143, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/data/db.ts"],"sourcesContent":["import mysql from 'mysql2/promise';\r\n\r\n// Create a connection pool for MySQL\r\nconst pool = mysql.createPool({\r\n  host: process.env.DB_HOST || 'localhost', // Replace with your MySQL host\r\n  user: process.env.DB_USER || 'root', // Replace with your MySQL username\r\n  password: process.env.DB_PASSWORD || '#InsideOut6', // Replace with your MySQL password\r\n  database: process.env.DB_NAME || 'timecapsuledbs', // Replace with your database name\r\n  waitForConnections: true,\r\n  connectionLimit: 10,\r\n  queueLimit: 0,\r\n});\r\n\r\nexport default pool;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,qCAAqC;AACrC,MAAM,OAAO,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;IAC5B,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,UAAU,QAAQ,GAAG,CAAC,WAAW,IAAI;IACrC,UAAU,QAAQ,GAAG,CAAC,OAAO,IAAI;IACjC,oBAAoB;IACpB,iBAAiB;IACjB,YAAY;AACd;uCAEe"}},
    {"offset": {"line": 159, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 165, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/app/api/adminData/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport db from \"../../../data/db\"; // Adjust this path to your actual db file\r\n\r\nexport async function GET() {\r\n  try {\r\n    // Fetch all audit logs (logs from all users)\r\n    const [logRows]: [any[], any] = await db.query(\r\n      `\r\n      SELECT al.log_id, al.user_id, al.action_type, al.capsule_id, al.timestamp,\r\n             tc.capsule_name,\r\n             GROUP_CONCAT(DISTINCT su.shared_username ORDER BY su.shared_username ASC) AS shared_usernames\r\n      FROM audit_logs al\r\n      LEFT JOIN time_capsules tc ON al.capsule_id = tc.capsule_id\r\n      LEFT JOIN shared_users su ON al.capsule_id = su.capsule_id\r\n      GROUP BY al.log_id, al.user_id, al.action_type, al.capsule_id, al.timestamp, tc.capsule_name\r\n      ORDER BY al.timestamp DESC\r\n      `\r\n    );\r\n\r\n    if (logRows.length === 0) {\r\n      return NextResponse.json(\r\n        { error: \"No logs found.\" },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    // Return the logs\r\n    return NextResponse.json(\r\n      { logs: logRows },\r\n      { status: 200 }\r\n    );\r\n  } catch (error) {\r\n    console.error(\"Error fetching audit logs:\", error);\r\n    return NextResponse.json(\r\n      { error: \"Internal server error.\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA,qMAAmC,0CAA0C;;;AAEtE,eAAe;IACpB,IAAI;QACF,6CAA6C;QAC7C,MAAM,CAAC,QAAQ,GAAiB,MAAM,mHAAA,CAAA,UAAE,CAAC,KAAK,CAC5C,CAAC;;;;;;;;;MASD,CAAC;QAGH,IAAI,QAAQ,MAAM,KAAK,GAAG;YACxB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAiB,GAC1B;gBAAE,QAAQ;YAAI;QAElB;QAEA,kBAAkB;QAClB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,MAAM;QAAQ,GAChB;YAAE,QAAQ;QAAI;IAElB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAyB,GAClC;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}