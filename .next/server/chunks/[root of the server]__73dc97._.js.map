{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 143, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/data/db.ts"],"sourcesContent":["import mysql from 'mysql2/promise';\r\n\r\n// Create a connection pool for MySQL\r\nconst pool = mysql.createPool({\r\n  host: process.env.DB_HOST || 'localhost', // Replace with your MySQL host\r\n  user: process.env.DB_USER || 'root', // Replace with your MySQL username\r\n  password: process.env.DB_PASSWORD || '#InsideOut6', // Replace with your MySQL password\r\n  database: process.env.DB_NAME || 'timecapsuledbs', // Replace with your database name\r\n  waitForConnections: true,\r\n  connectionLimit: 10,\r\n  queueLimit: 0,\r\n});\r\n\r\nexport default pool;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,qCAAqC;AACrC,MAAM,OAAO,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;IAC5B,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,UAAU,QAAQ,GAAG,CAAC,WAAW,IAAI;IACrC,UAAU,QAAQ,GAAG,CAAC,OAAO,IAAI;IACjC,oBAAoB;IACpB,iBAAiB;IACjB,YAAY;AACd;uCAEe"}},
    {"offset": {"line": 159, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 165, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/app/api/time-capsule/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport db from \"../../../data/db\";\r\nimport { RowDataPacket } from \"mysql2\";\r\n\r\nexport async function POST(req: Request) {\r\n  try {\r\n    const formData = await req.formData();\r\n    const { username, capsule_name, release_date, release_time } = Object.fromEntries(formData.entries());\r\n\r\n    // Validate input\r\n    if (!username || !capsule_name || !release_date || !release_time) {\r\n      return NextResponse.json(\r\n        { error: \"All fields are required\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const today = new Date().toISOString().split('T')[0]; // Get current date in YYYY-MM-DD format\r\n    if (release_date < today) {\r\n      return NextResponse.json(\r\n        { error: \"Release date must be today or in the future\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    if (release_date === today) {\r\n      const currentTime = new Date().toTimeString().split(' ')[0]; // Get current time in HH:mm:ss format\r\n      if (release_time <= currentTime) {\r\n        return NextResponse.json(\r\n          { error: \"Release time must be later than the current time\" },\r\n          { status: 400 }\r\n        );\r\n      }\r\n    }\r\n\r\n    type UserResult = { user_id: number; };    \r\n\r\n    const [userResult] = await db.execute<RowDataPacket[]>(\r\n      `SELECT user_id FROM users WHERE username = ?`,\r\n      [username]\r\n    );\r\n    \r\n    if (userResult.length === 0) {\r\n      throw new Error(\"User not found\");\r\n    }\r\n    \r\n    const user_id = (userResult[0] as UserResult).user_id; \r\n\r\n    const [existingCapsules] = await db.execute<RowDataPacket[]>(\r\n      `SELECT * FROM time_capsules WHERE user_id = ? AND capsule_name = ?`,\r\n      [capsule_name, user_id]\r\n    );\r\n\r\n    if (existingCapsules.length > 0) {\r\n      return NextResponse.json(\r\n        { error: \"Capsule name already exists for this user.\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const releaseDateTime = new Date(`${release_date}T${release_time}`);\r\n    const currentTime = new Date();\r\n    const status = releaseDateTime <= currentTime ? \"delivered\" : \"scheduled\";\r\n\r\n    // Step 1: Create the time capsule\r\n    const capsuleResult = await db.execute(\r\n      `INSERT INTO time_capsules (user_id, capsule_name, release_date, release_time, status)\r\n       VALUES (?, ?, ?, ?, ?)`,\r\n      [user_id, capsule_name, release_date, release_time, status]\r\n    );\r\n    \r\n    // Extract the insertId properly\r\n    const capsule_id = (capsuleResult as any).insertId; // or use a type definition for better safety\r\n    \r\n\r\n    return NextResponse.json({\r\n      message: \"Time Capsule sealed successfully\",\r\n      capsule_id: capsule_id,\r\n      capsule_name: capsule_name,\r\n      status: status,\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error in /api/time-capsule:\", error);\r\n    return NextResponse.json({ error: \"Server error\" }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAGO,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,WAAW,MAAM,IAAI,QAAQ;QACnC,MAAM,EAAE,QAAQ,EAAE,YAAY,EAAE,YAAY,EAAE,YAAY,EAAE,GAAG,OAAO,WAAW,CAAC,SAAS,OAAO;QAElG,iBAAiB;QACjB,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,cAAc;YAChE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA0B,GACnC;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,QAAQ,IAAI,OAAO,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE,wCAAwC;QAC9F,IAAI,eAAe,OAAO;YACxB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA8C,GACvD;gBAAE,QAAQ;YAAI;QAElB;QAEA,IAAI,iBAAiB,OAAO;YAC1B,MAAM,cAAc,IAAI,OAAO,YAAY,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE,sCAAsC;YACnG,IAAI,gBAAgB,aAAa;gBAC/B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;oBAAE,OAAO;gBAAmD,GAC5D;oBAAE,QAAQ;gBAAI;YAElB;QACF;QAIA,MAAM,CAAC,WAAW,GAAG,MAAM,mHAAA,CAAA,UAAE,CAAC,OAAO,CACnC,CAAC,4CAA4C,CAAC,EAC9C;YAAC;SAAS;QAGZ,IAAI,WAAW,MAAM,KAAK,GAAG;YAC3B,MAAM,IAAI,MAAM;QAClB;QAEA,MAAM,UAAU,AAAC,UAAU,CAAC,EAAE,CAAgB,OAAO;QAErD,MAAM,CAAC,iBAAiB,GAAG,MAAM,mHAAA,CAAA,UAAE,CAAC,OAAO,CACzC,CAAC,kEAAkE,CAAC,EACpE;YAAC;YAAc;SAAQ;QAGzB,IAAI,iBAAiB,MAAM,GAAG,GAAG;YAC/B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA6C,GACtD;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,kBAAkB,IAAI,KAAK,GAAG,aAAa,CAAC,EAAE,cAAc;QAClE,MAAM,cAAc,IAAI;QACxB,MAAM,SAAS,mBAAmB,cAAc,cAAc;QAE9D,kCAAkC;QAClC,MAAM,gBAAgB,MAAM,mHAAA,CAAA,UAAE,CAAC,OAAO,CACpC,CAAC;6BACsB,CAAC,EACxB;YAAC;YAAS;YAAc;YAAc;YAAc;SAAO;QAG7D,gCAAgC;QAChC,MAAM,aAAa,AAAC,cAAsB,QAAQ,EAAE,6CAA6C;QAGjG,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,YAAY;YACZ,cAAc;YACd,QAAQ;QACV;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAe,GAAG;YAAE,QAAQ;QAAI;IACpE;AACF"}},
    {"offset": {"line": 249, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}