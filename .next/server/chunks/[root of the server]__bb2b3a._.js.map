{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 143, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/data/db.ts"],"sourcesContent":["import mysql from 'mysql2/promise';\r\n\r\n// Create a connection pool for MySQL\r\nconst pool = mysql.createPool({\r\n  host: process.env.DB_HOST || 'localhost', // Replace with your MySQL host\r\n  user: process.env.DB_USER || 'root', // Replace with your MySQL username\r\n  password: process.env.DB_PASSWORD || '#InsideOut6', // Replace with your MySQL password\r\n  database: process.env.DB_NAME || 'timecapsuledbs', // Replace with your database name\r\n  waitForConnections: true,\r\n  connectionLimit: 10,\r\n  queueLimit: 0,\r\n});\r\n\r\nexport default pool;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,qCAAqC;AACrC,MAAM,OAAO,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;IAC5B,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,UAAU,QAAQ,GAAG,CAAC,WAAW,IAAI;IACrC,UAAU,QAAQ,GAAG,CAAC,OAAO,IAAI;IACjC,oBAAoB;IACpB,iBAAiB;IACjB,YAAY;AACd;uCAEe"}},
    {"offset": {"line": 159, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 165, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/app/api/capsuleInfo/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\r\nimport db from \"../../../data/db\"; // Import the db correctly\r\n\r\nexport async function GET(req: NextRequest) {\r\n  try {\r\n    // Extract capsuleName from the query parameters\r\n    const url = req.nextUrl;\r\n    const capsuleName = url.searchParams.get(\"capsuleName\");\r\n\r\n    if (!capsuleName) {\r\n      return NextResponse.json({ message: \"Capsule name is required\" }, { status: 400 });\r\n    }\r\n\r\n    // Fetch time capsule details by capsule name\r\n    const capsuleQuery = `\r\n      SELECT t.capsule_id, t.capsule_name, t.release_date, t.release_time, t.status, u.first_name, u.last_name\r\n      FROM time_capsules t\r\n      JOIN users u ON t.user_id = u.user_id\r\n      WHERE t.capsule_name = ?`;\r\n\r\n    // Fetch capsule details using db.query\r\n    const [capsuleDetails]: [any[], any] = await db.query(capsuleQuery, [capsuleName]);\r\n\r\n    if (capsuleDetails.length === 0) {\r\n      return NextResponse.json({ message: \"Capsule not found\" }, { status: 404 });\r\n    }\r\n\r\n    const capsule = capsuleDetails[0];\r\n\r\n    // Format the release_date using JavaScript Date object\r\n    const formattedReleaseDate = new Date(capsule.release_date).toLocaleDateString(); // Format as 'MM/DD/YYYY'\r\n    const formattedReleaseTime = capsule.release_time; // This is already in HH:mm:ss format, you can keep it as is.\r\n\r\n    // Fetch shared users for the capsule\r\n    const sharedUsersQuery = `\r\n      SELECT su.shared_username \r\n      FROM shared_users su \r\n      WHERE su.capsule_id = ?`;\r\n\r\n    const [sharedUsers]: [any[], any] = await db.query(sharedUsersQuery, [capsule.capsule_id]);\r\n\r\n    return NextResponse.json({\r\n      ...capsule,\r\n      release_date: formattedReleaseDate,\r\n      release_time: formattedReleaseTime,\r\n      sharedWith: sharedUsers.map((user: any) => user.shared_username),\r\n    });\r\n  } catch (error) {\r\n    console.error(error);\r\n    return NextResponse.json({ message: \"Error fetching capsule details\" }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA,qMAAmC,0BAA0B;;;AAEtD,eAAe,IAAI,GAAgB;IACxC,IAAI;QACF,gDAAgD;QAChD,MAAM,MAAM,IAAI,OAAO;QACvB,MAAM,cAAc,IAAI,YAAY,CAAC,GAAG,CAAC;QAEzC,IAAI,CAAC,aAAa;YAChB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAA2B,GAAG;gBAAE,QAAQ;YAAI;QAClF;QAEA,6CAA6C;QAC7C,MAAM,eAAe,CAAC;;;;8BAII,CAAC;QAE3B,uCAAuC;QACvC,MAAM,CAAC,eAAe,GAAiB,MAAM,mHAAA,CAAA,UAAE,CAAC,KAAK,CAAC,cAAc;YAAC;SAAY;QAEjF,IAAI,eAAe,MAAM,KAAK,GAAG;YAC/B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAAoB,GAAG;gBAAE,QAAQ;YAAI;QAC3E;QAEA,MAAM,UAAU,cAAc,CAAC,EAAE;QAEjC,uDAAuD;QACvD,MAAM,uBAAuB,IAAI,KAAK,QAAQ,YAAY,EAAE,kBAAkB,IAAI,yBAAyB;QAC3G,MAAM,uBAAuB,QAAQ,YAAY,EAAE,6DAA6D;QAEhH,qCAAqC;QACrC,MAAM,mBAAmB,CAAC;;;6BAGD,CAAC;QAE1B,MAAM,CAAC,YAAY,GAAiB,MAAM,mHAAA,CAAA,UAAE,CAAC,KAAK,CAAC,kBAAkB;YAAC,QAAQ,UAAU;SAAC;QAEzF,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,GAAG,OAAO;YACV,cAAc;YACd,cAAc;YACd,YAAY,YAAY,GAAG,CAAC,CAAC,OAAc,KAAK,eAAe;QACjE;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAiC,GAAG;YAAE,QAAQ;QAAI;IACxF;AACF"}},
    {"offset": {"line": 228, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}