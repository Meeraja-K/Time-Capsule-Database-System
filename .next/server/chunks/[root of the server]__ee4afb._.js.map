{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 143, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/data/db.ts"],"sourcesContent":["import mysql from 'mysql2/promise';\r\n\r\n// Create a connection pool for MySQL\r\nconst pool = mysql.createPool({\r\n  host: process.env.DB_HOST || 'localhost', // Replace with your MySQL host\r\n  user: process.env.DB_USER || 'root', // Replace with your MySQL username\r\n  password: process.env.DB_PASSWORD || '#InsideOut6', // Replace with your MySQL password\r\n  database: process.env.DB_NAME || 'timecapsuledbs', // Replace with your database name\r\n  waitForConnections: true,\r\n  connectionLimit: 10,\r\n  queueLimit: 0,\r\n});\r\n\r\nexport default pool;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,qCAAqC;AACrC,MAAM,OAAO,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;IAC5B,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,UAAU,QAAQ,GAAG,CAAC,WAAW,IAAI;IACrC,UAAU,QAAQ,GAAG,CAAC,OAAO,IAAI;IACjC,oBAAoB;IACpB,iBAAiB;IACjB,YAAY;AACd;uCAEe"}},
    {"offset": {"line": 159, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 165, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/app/api/addSharedUsers/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport db from \"../../../data/db\"; // Assuming db is your database connection\r\n\r\nexport async function POST(req: Request) {\r\n  try {\r\n    const body = await req.json();\r\n    const { shared_users, capsule_id } = body;\r\n\r\n    // Validate the input data\r\n    if (!Array.isArray(shared_users) || shared_users.length === 0) {\r\n      return NextResponse.json(\r\n        { error: \"Shared users data is invalid\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    if (!capsule_id) {\r\n      return NextResponse.json(\r\n        { error: \"Capsule ID is required\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Create a values array for the bulk insert\r\n    const values: any[] = [];\r\n    shared_users.forEach((user: any) => {\r\n      values.push([capsule_id, user.username]);\r\n    });\r\n\r\n    // Correct the query to use VALUES() for insertion\r\n    const query = `\r\n      INSERT INTO shared_users (capsule_id, shared_username)\r\n      SELECT ?, ?\r\n      WHERE NOT EXISTS (\r\n        SELECT 1 FROM shared_users\r\n        WHERE capsule_id = ? AND shared_username = ?\r\n      )\r\n      AND EXISTS (\r\n        SELECT 1 FROM users\r\n        WHERE username = ?\r\n      )\r\n    `;\r\n\r\n    // Execute the queries with the correct parameter passing\r\n    const queries = values.map((value) =>\r\n      db.execute(query, [...value, value[0], value[1], value[1]])\r\n    );\r\n\r\n    await Promise.all(queries);\r\n\r\n    return NextResponse.json({ message: \"Shared users added successfully\" }, { status: 200 });\r\n  } catch (error) {\r\n    console.error(\"Error in /api/addSharedUsers:\", error);\r\n    return NextResponse.json({ error: \"Server error\" }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA,qMAAmC,0CAA0C;;;AAEtE,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,OAAO,MAAM,IAAI,IAAI;QAC3B,MAAM,EAAE,YAAY,EAAE,UAAU,EAAE,GAAG;QAErC,0BAA0B;QAC1B,IAAI,CAAC,MAAM,OAAO,CAAC,iBAAiB,aAAa,MAAM,KAAK,GAAG;YAC7D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA+B,GACxC;gBAAE,QAAQ;YAAI;QAElB;QAEA,IAAI,CAAC,YAAY;YACf,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAyB,GAClC;gBAAE,QAAQ;YAAI;QAElB;QAEA,4CAA4C;QAC5C,MAAM,SAAgB,EAAE;QACxB,aAAa,OAAO,CAAC,CAAC;YACpB,OAAO,IAAI,CAAC;gBAAC;gBAAY,KAAK,QAAQ;aAAC;QACzC;QAEA,kDAAkD;QAClD,MAAM,QAAQ,CAAC;;;;;;;;;;;IAWf,CAAC;QAED,yDAAyD;QACzD,MAAM,UAAU,OAAO,GAAG,CAAC,CAAC,QAC1B,mHAAA,CAAA,UAAE,CAAC,OAAO,CAAC,OAAO;mBAAI;gBAAO,KAAK,CAAC,EAAE;gBAAE,KAAK,CAAC,EAAE;gBAAE,KAAK,CAAC,EAAE;aAAC;QAG5D,MAAM,QAAQ,GAAG,CAAC;QAElB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAkC,GAAG;YAAE,QAAQ;QAAI;IACzF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iCAAiC;QAC/C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAe,GAAG;YAAE,QAAQ;QAAI;IACpE;AACF"}},
    {"offset": {"line": 234, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}