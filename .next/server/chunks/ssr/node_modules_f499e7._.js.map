{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"file":"threejs-toys.module.js","sources":["turbopack://[project]/node_modules/threejs-toys/src/pointer.js","turbopack://[project]/node_modules/threejs-toys/src/three.js","turbopack://[project]/node_modules/threejs-toys/src/cursors/neon/index.js","turbopack://[project]/node_modules/threejs-toys/src/tools/color.js","turbopack://[project]/node_modules/threejs-toys/src/glsl/psrdnoise3.glsl","turbopack://[project]/node_modules/threejs-toys/src/cursors/particles/index.js","turbopack://[project]/node_modules/threejs-toys/src/tools/canvasTexture.js","turbopack://[project]/node_modules/threejs-toys/src/glsl/psrdnoise2.glsl","turbopack://[project]/node_modules/threejs-toys/src/backgrounds/noisy-lines/index.js","turbopack://[project]/node_modules/threejs-toys/src/backgrounds/butterflies/index.js","turbopack://[project]/node_modules/threejs-toys/src/backgrounds/swarm/index.js","turbopack://[project]/node_modules/threejs-toys/src/backgrounds/fishes/index.js"],"sourcesContent":["import { Vector2 } from 'three'\n\n/**\n * Pointer helper\n * @author Kevin Levron <kevin.levron@gmail.com>\n */\nexport default function (params) {\n  const {\n    domElement,\n    onClick = () => {},\n    onEnter = () => {},\n    onMove = () => {},\n    onLeave = () => {},\n    onDragStart = () => {},\n    onDragMove = () => {},\n    onDragStop = () => {}\n  } = params\n\n  const position = new Vector2()\n  const nPosition = new Vector2()\n  const startPosition = new Vector2()\n  const lastPosition = new Vector2()\n  const delta = new Vector2()\n\n  const obj = { position, nPosition, hover: false, down: false, removeListeners }\n\n  addListeners()\n\n  return obj\n\n  function pointerClick (e) {\n    if (startPosition.distanceTo(position) < 20) {\n      // console.log('pointerClick')\n      updatePosition(e)\n      onClick({ position, nPosition })\n    }\n  }\n\n  function pointerEnter (e) {\n    // console.log('pointerEnter', e)\n    obj.hover = e.pointerType === 'mouse'\n    updatePosition(e)\n    onEnter({ position, nPosition })\n  }\n\n  function pointerDown (e) {\n    // console.log('pointerDown')\n    obj.down = true\n    updatePosition(e)\n    startPosition.copy(position)\n    lastPosition.copy(position)\n    onDragStart({ position, nPosition })\n  }\n\n  function pointerMove (e) {\n    // console.log('pointerMove')\n    updatePosition(e)\n    delta.copy(position).sub(lastPosition)\n    if (obj.down) {\n      onDragMove({ position, nPosition, startPosition, lastPosition, delta })\n    } else {\n      if (!obj.hover) obj.hover = true\n    }\n    onMove({ position, nPosition, startPosition, lastPosition, delta })\n    lastPosition.copy(position)\n  }\n\n  function pointerUp (e) {\n    // console.log('pointerUp')\n    obj.down = false\n    onDragStop()\n  }\n\n  function pointerLeave (e) {\n    // console.log('pointerLeave')\n    if (obj.down) {\n      obj.down = false\n      onDragStop()\n    }\n    obj.hover = false\n    onLeave()\n  }\n\n  function updatePosition (e) {\n    const rect = domElement.getBoundingClientRect()\n    position.x = e.clientX - rect.left\n    position.y = e.clientY - rect.top\n    nPosition.x = (position.x / rect.width) * 2 - 1\n    nPosition.y = -(position.y / rect.height) * 2 + 1\n  }\n\n  function addListeners () {\n    domElement.addEventListener('click', pointerClick)\n    domElement.addEventListener('pointerenter', pointerEnter)\n    domElement.addEventListener('pointerdown', pointerDown)\n    domElement.addEventListener('pointermove', pointerMove)\n    domElement.addEventListener('pointerup', pointerUp)\n    domElement.addEventListener('pointerleave', pointerLeave)\n  }\n\n  function removeListeners () {\n    domElement.removeEventListener('click', pointerClick)\n    domElement.removeEventListener('pointerenter', pointerEnter)\n    domElement.removeEventListener('pointerdown', pointerDown)\n    domElement.removeEventListener('pointermove', pointerMove)\n    domElement.removeEventListener('pointerup', pointerUp)\n    domElement.removeEventListener('pointerleave', pointerLeave)\n  }\n}\n","import {\n  AmbientLight,\n  DirectionalLight,\n  PerspectiveCamera,\n  PointLight,\n  Scene,\n  WebGLRenderer\n} from 'three'\n\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'\n\nimport pointer from './pointer'\n\nexport default function (params) {\n  const options = {\n    el: null,\n    canvas: null,\n    eventsEl: null,\n    width: null,\n    height: null,\n    resize: true,\n    alpha: false,\n    antialias: false,\n    orbitControls: false,\n    init () {},\n    initCamera () {},\n    initScene () {},\n    afterResize () {},\n    beforeRender () {},\n    ...params\n  }\n\n  const three = {\n    renderer: null,\n    camera: null,\n    scene: null,\n    pointer: null,\n    width: 0,\n    height: 0,\n    wWidth: 0,\n    wHeight: 0,\n    clock: {\n      startTime: 0,\n      time: 0,\n      elapsed: 0\n    },\n    options\n  }\n\n  let render\n\n  let cameraCtrl\n\n  init()\n\n  return three\n\n  function init () {\n    let canvas\n    if (options.el) {\n      canvas = document.createElement('canvas')\n      options.el.appendChild(canvas)\n    } else if (options.canvas) {\n      canvas = options.canvas\n    } else {\n      throw new Error('Missing parameter : el or canvas is required')\n    }\n\n    options.init?.(three)\n\n    three.renderer = new WebGLRenderer({ canvas, alpha: options.alpha, antialias: options.antialias })\n    options.initRenderer?.(three)\n\n    three.camera = new PerspectiveCamera()\n    three.camera.position.z = 50\n    options.initCamera?.(three)\n\n    if (options.orbitControls) {\n      cameraCtrl = new OrbitControls(three.camera, options.eventsEl ?? three.renderer.domElement)\n      cameraCtrl.enableDamping = true\n      cameraCtrl.dampingFactor = 0.1\n      if (typeof options.orbitControls === 'object') {\n        Object.keys(options.orbitControls).forEach(key => {\n          cameraCtrl[key] = options.orbitControls[key]\n        })\n      }\n    }\n\n    resize()\n    if (options.resize && !options.width && !options.height) {\n      window.addEventListener('resize', resize)\n    }\n\n    three.scene = new Scene()\n    options.initScene?.(three)\n\n    initPointer()\n\n    render = options.render ? options.render : () => { three.renderer.render(three.scene, three.camera) }\n\n    requestAnimationFrame(timestamp => {\n      three.clock.startTime = three.clock.time = timestamp\n      requestAnimationFrame(animate)\n    })\n  }\n\n  function initPointer () {\n    const pointerOptions = {}\n    if (options.onPointerEnter) { pointerOptions.onEnter = options.onPointerEnter }\n    if (options.onPointerMove) { pointerOptions.onMove = options.onPointerMove }\n    if (options.onPointerMove) { pointerOptions.onLeave = options.onPointerLeave }\n    if (Object.keys(pointerOptions).length > 0) {\n      three.pointer = pointer({ domElement: options.eventsEl ?? (options.el ?? options.canvas), ...pointerOptions })\n    }\n  }\n\n  function animate (timestamp) {\n    const { clock } = three\n    clock.elapsed = timestamp - clock.time\n    clock.time = timestamp\n\n    options.beforeRender(three)\n\n    if (cameraCtrl) cameraCtrl.update()\n\n    render(three)\n    requestAnimationFrame(animate)\n  }\n\n  function resize () {\n    if (options.width && options.height) {\n      three.width = options.width\n      three.height = options.height\n    } else if (options.resize === 'window') {\n      three.width = window.innerWidth\n      three.height = window.innerHeight\n    } else {\n      const parent = three.renderer.domElement.parentElement\n      three.width = parent.clientWidth\n      three.height = parent.clientHeight\n    }\n\n    three.renderer.setSize(three.width, three.height)\n    three.camera.aspect = three.width / three.height\n    three.camera.updateProjectionMatrix()\n    if (three.camera instanceof PerspectiveCamera) {\n      const wsize = getCameraViewSize()\n      three.wWidth = wsize[0]; three.wHeight = wsize[1]\n    } else {\n      three.wWidth = three.camera.top - three.camera.bottom\n      three.wHeight = three.camera.right - three.camera.left\n    }\n    options.afterResize?.(three)\n  }\n\n  function getCameraViewSize () {\n    const vFOV = (three.camera.fov * Math.PI) / 180\n    const h = 2 * Math.tan(vFOV / 2) * Math.abs(three.camera.position.z)\n    const w = h * three.camera.aspect\n    return [w, h]\n  }\n}\n\nexport function commonConfig (params) {\n  const config = {}\n  const keys = ['el', 'canvas', 'eventsEl', 'width', 'height', 'resize', 'orbitControls']\n  keys.forEach(key => {\n    if (params[key] !== undefined) config[key] = params[key]\n  })\n  return config\n}\n\nexport function initLights (scene, lightsConfig) {\n  const lights = []\n  if (Array.isArray(lightsConfig) && lightsConfig.length > 0) {\n    let light\n    lightsConfig.forEach(lightConfig => {\n      switch (lightConfig.type) {\n        case 'ambient':\n          light = new AmbientLight(...lightConfig.params)\n          break\n        case 'directional':\n          light = new DirectionalLight(...lightConfig.params)\n          break\n        case 'point':\n          light = new PointLight(...lightConfig.params)\n          break\n        default:\n          console.error(`Unknown light type ${lightConfig.type}`)\n      }\n      if (light) {\n        if (typeof lightConfig.props === 'object') {\n          Object.keys(lightConfig.props).forEach(key => {\n            if (key === 'position') {\n              light.position.set(...lightConfig.props[key])\n            } else light[key] = lightConfig.props[key]\n          })\n        }\n        scene.add(light)\n        lights.push(light)\n      }\n    })\n  }\n  return lights\n}\n","import { Color, Mesh, OrthographicCamera, PlaneGeometry, ShaderMaterial, SplineCurve, Vector2, Vector3 } from 'three'\nimport three from '../../three'\n\nconst defaultConfig = {\n  shaderPoints: 8,\n  curvePoints: 80,\n  curveLerp: 0.75,\n  radius1: 3,\n  radius2: 5,\n  velocityTreshold: 10,\n  sleepRadiusX: 150,\n  sleepRadiusY: 150,\n  sleepTimeCoefX: 0.0025,\n  sleepTimeCoefY: 0.0025\n}\n\nexport default function (params) {\n  const config = { ...defaultConfig, ...params }\n\n  const points = new Array(config.curvePoints).fill(0).map(() => new Vector2())\n  const spline = new SplineCurve(points)\n\n  const velocity = new Vector3()\n  const velocityTarget = new Vector3()\n\n  const uRatio = { value: new Vector2() }\n  const uSize = { value: new Vector2() }\n  const uPoints = { value: new Array(config.shaderPoints).fill(0).map(() => new Vector2()) }\n  const uColor = { value: new Color(0xff00ff) }\n\n  let material\n  let plane\n  let hover = false\n\n  const threeConfig = {}\n  const keys = ['el', 'canvas', 'width', 'height', 'resize']\n  keys.forEach(key => {\n    if (params[key] !== undefined) threeConfig[key] = params[key]\n  })\n\n  three({\n    ...threeConfig,\n    antialias: false,\n    initCamera (three) {\n      three.camera = new OrthographicCamera()\n    },\n    initScene ({ scene }) {\n      const geometry = new PlaneGeometry(2, 2)\n      material = new ShaderMaterial({\n        uniforms: { uRatio, uSize, uPoints, uColor },\n        defines: {\n          SHADER_POINTS: config.shaderPoints\n        },\n        vertexShader: `\n          varying vec2 vUv;\n          void main() {\n            vUv = uv;\n            gl_Position = vec4(position, 1.0);\n          }\n        `,\n        fragmentShader: `\n          // https://www.shadertoy.com/view/wdy3DD\n          // https://www.shadertoy.com/view/MlKcDD\n          // Signed distance to a quadratic bezier\n          float sdBezier(vec2 pos, vec2 A, vec2 B, vec2 C) {\n            vec2 a = B - A;\n            vec2 b = A - 2.0*B + C;\n            vec2 c = a * 2.0;\n            vec2 d = A - pos;\n            float kk = 1.0 / dot(b,b);\n            float kx = kk * dot(a,b);\n            float ky = kk * (2.0*dot(a,a)+dot(d,b)) / 3.0;\n            float kz = kk * dot(d,a);\n            float res = 0.0;\n            float p = ky - kx*kx;\n            float p3 = p*p*p;\n            float q = kx*(2.0*kx*kx - 3.0*ky) + kz;\n            float h = q*q + 4.0*p3;\n            if(h >= 0.0){\n              h = sqrt(h);\n              vec2 x = (vec2(h, -h) - q) / 2.0;\n              vec2 uv = sign(x)*pow(abs(x), vec2(1.0/3.0));\n              float t = uv.x + uv.y - kx;\n              t = clamp( t, 0.0, 1.0 );\n              // 1 root\n              vec2 qos = d + (c + b*t)*t;\n              res = length(qos);\n            } else {\n              float z = sqrt(-p);\n              float v = acos( q/(p*z*2.0) ) / 3.0;\n              float m = cos(v);\n              float n = sin(v)*1.732050808;\n              vec3 t = vec3(m + m, -n - m, n - m) * z - kx;\n              t = clamp( t, 0.0, 1.0 );\n              // 3 roots\n              vec2 qos = d + (c + b*t.x)*t.x;\n              float dis = dot(qos,qos);\n              res = dis;\n              qos = d + (c + b*t.y)*t.y;\n              dis = dot(qos,qos);\n              res = min(res,dis);\n              qos = d + (c + b*t.z)*t.z;\n              dis = dot(qos,qos);\n              res = min(res,dis);\n              res = sqrt( res );\n            }\n            return res;\n          }\n\n          uniform vec2 uRatio;\n          uniform vec2 uSize;\n          uniform vec2 uPoints[SHADER_POINTS];\n          uniform vec3 uColor;\n          varying vec2 vUv;\n          void main() {\n            float intensity = 1.0;\n            float radius = 0.015;\n\n            vec2 pos = (vUv - 0.5) * uRatio;\n\n            vec2 c = (uPoints[0] + uPoints[1]) / 2.0;\n            vec2 c_prev;\n            float dist = 10000.0;\n            for(int i = 0; i < SHADER_POINTS - 1; i++){\n              c_prev = c;\n              c = (uPoints[i] + uPoints[i + 1]) / 2.0;\n              dist = min(dist, sdBezier(pos, c_prev, uPoints[i], c));\n            }\n            dist = max(0.0, dist);\n\n            float glow = pow(uSize.y / dist, intensity);\n            vec3 col = vec3(0.0);\n            col += 10.0 * vec3(smoothstep(uSize.x, 0.0, dist));\n            col += glow * uColor;\n\n            // Tone mapping\n            col = 1.0 - exp(-col);\n            col = pow(col, vec3(0.4545));\n  \n            gl_FragColor = vec4(col, 1.0);\n          }\n        `\n      })\n      plane = new Mesh(geometry, material)\n      scene.add(plane)\n    },\n    afterResize ({ width, height }) {\n      uSize.value.set(config.radius1, config.radius2)\n      if (width >= height) {\n        uRatio.value.set(1, height / width)\n        uSize.value.multiplyScalar(1 / width)\n      } else {\n        uRatio.value.set(width / height, 1)\n        uSize.value.multiplyScalar(1 / height)\n      }\n    },\n    beforeRender ({ clock, width, height, wWidth }) {\n      for (let i = 1; i < config.curvePoints; i++) {\n        points[i].lerp(points[i - 1], config.curveLerp)\n      }\n      for (let i = 0; i < config.shaderPoints; i++) {\n        spline.getPoint(i / (config.shaderPoints - 1), uPoints.value[i])\n      }\n\n      if (!hover) {\n        const t1 = clock.time * config.sleepTimeCoefX\n        const t2 = clock.time * config.sleepTimeCoefY\n        const cos = Math.cos(t1)\n        const sin = Math.sin(t2)\n        const r1 = config.sleepRadiusX * wWidth / width\n        const r2 = config.sleepRadiusY * wWidth / width\n        const x = r1 * cos\n        const y = r2 * sin\n        spline.points[0].set(x, y)\n        uColor.value.r = 0.5 + 0.5 * Math.cos(clock.time * 0.0015)\n        uColor.value.g = 0\n        uColor.value.b = 1 - uColor.value.r\n      } else {\n        uColor.value.r = velocity.z\n        uColor.value.g = 0\n        uColor.value.b = 1 - velocity.z\n        velocity.multiplyScalar(0.95)\n      }\n    },\n    onPointerMove ({ nPosition, delta }) {\n      hover = true\n      const x = (0.5 * nPosition.x) * uRatio.value.x\n      const y = (0.5 * nPosition.y) * uRatio.value.y\n      spline.points[0].set(x, y)\n\n      velocityTarget.x = Math.min(velocity.x + Math.abs(delta.x) / config.velocityTreshold, 1)\n      velocityTarget.y = Math.min(velocity.y + Math.abs(delta.y) / config.velocityTreshold, 1)\n      velocityTarget.z = Math.sqrt(velocityTarget.x * velocityTarget.x + velocityTarget.y * velocityTarget.y)\n      velocity.lerp(velocityTarget, 0.05)\n    },\n    onPointerLeave () {\n      hover = false\n    }\n  })\n\n  return { config }\n}\n","import { Color } from 'three'\r\n\r\nexport function colorScale (colors) {\r\n  let range = []\r\n  setColors(colors)\r\n\r\n  const dummy = new Color()\r\n\r\n  return { setColors, getColorAt }\r\n\r\n  function setColors (colors) {\r\n    range = []\r\n    colors.forEach(color => {\r\n      range.push(new Color(color))\r\n    })\r\n  }\r\n\r\n  function getColorAt (progress) {\r\n    const p = Math.max(0, Math.min(1, progress)) * (colors.length - 1)\r\n    const i1 = Math.floor(p)\r\n    const c1 = range[i1]\r\n    if (i1 === colors.length - 1) {\r\n      return c1.getHex()\r\n    }\r\n    const p1 = p - i1\r\n    const c2 = range[i1 + 1]\r\n\r\n    dummy.r = c1.r + p1 * (c2.r - c1.r)\r\n    dummy.g = c1.g + p1 * (c2.g - c1.g)\r\n    dummy.b = c1.b + p1 * (c2.b - c1.b)\r\n    return dummy.clone()\r\n  }\r\n}\r\n","//\r\n// psrdnoise3.glsl\r\n//\r\n// Authors: Stefan Gustavson (stefan.gustavson@gmail.com)\r\n// and Ian McEwan (ijm567@gmail.com)\r\n// Version 2021-12-02, published under the MIT license (see below)\r\n//\r\n// Copyright (c) 2021 Stefan Gustavson and Ian McEwan.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the \"Software\"),\r\n// to deal in the Software without restriction, including without limitation\r\n// the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n// and/or sell copies of the Software, and to permit persons to whom the\r\n// Software is furnished to do so, subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\r\n// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n// DEALINGS IN THE SOFTWARE.\r\n//\r\n\r\n//\r\n// Periodic (tiling) 3-D simplex noise (tetrahedral lattice gradient noise)\r\n// with rotating gradients and analytic derivatives.\r\n//\r\n// This is (yet) another variation on simplex noise. Unlike previous\r\n// implementations, the grid is axis-aligned to permit rectangular tiling.\r\n// The noise pattern can be made to tile seamlessly to any integer periods\r\n// up to 289 units in the x, y and z directions. Specifying a longer\r\n// period than 289 will result in errors in the noise field.\r\n//\r\n// This particular version of 3-D noise also implements animation by rotating\r\n// the generating gradient at each lattice point around a pseudo-random axis.\r\n// The rotating gradients give the appearance of a swirling motion, and\r\n// can serve a similar purpose for animation as motion along the fourth\r\n// dimension in 4-D noise. \r\n//\r\n// The rotating gradients in conjunction with the built-in ability to\r\n// compute exact analytic derivatives allow for \"flow noise\" effects\r\n// as presented by Ken Perlin and Fabrice Neyret.\r\n//\r\n\r\n// Use Perlin's rotated grid instead of the new tiling grid?\r\n// Enabling this adds about 1% to the execution time and\r\n// requires all periods to be multiples of 3. Other\r\n// integer periods can be specified, but when not evenly\r\n// divisible by 3, the actual period will be 3 times longer.\r\n// Take care not to overstep the maximum allowed period (288).\r\n//#define PERLINGRID\r\n\r\n// Enable faster gradient rotations?\r\n// Enabling this saves about 10% on execution time,\r\n// but the function will not run faster for alpha = 0.\r\n//#define FASTROTATION\r\n\r\n\r\n// Permutation polynomial for the hash value\r\nvec4 permute(vec4 x) {\r\n     vec4 xm = mod(x, 289.0);\r\n     return mod(((xm*34.0)+10.0)*xm, 289.0);\r\n}\r\n\r\n//\r\n// 3-D tiling simplex noise with rotating gradients and first order\r\n// analytical derivatives.\r\n// \"vec3 x\" is the point (x,y,z) to evaluate\r\n// \"vec3 period\" is the desired periods along x,y,z, up to 289.\r\n// (If Perlin's grid is used, multiples of 3 up to 288 are allowed.)\r\n// \"float alpha\" is the rotation (in radians) for the swirling gradients.\r\n// The \"float\" return value is the noise value, and\r\n// the \"out vec3 gradient\" argument returns the x,y,z partial derivatives.\r\n//\r\n// The function executes 15-20% faster if alpha is constant == 0.0\r\n// across all fragments being executed in parallel.\r\n// (This speedup will not happen if FASTROTATION is enabled. Do not specify\r\n// FASTROTATION if you are not actually going to use the rotation.)\r\n//\r\n// Setting any period to 0.0 or a negative value will skip the periodic\r\n// wrap for that dimension. Setting all periods to 0.0 makes the function\r\n// execute 10-15% faster.\r\n//\r\n// Not using the return value for the gradient will make the compiler\r\n// eliminate the code for computing it. This speeds up the function by\r\n// around 10%.\r\n//\r\nfloat psrdnoise(vec3 x, vec3 period, float alpha, out vec3 gradient)\r\n{\r\n\r\n#ifndef PERLINGRID\r\n  // Transformation matrices for the axis-aligned simplex grid\r\n  const mat3 M = mat3(0.0, 1.0, 1.0,\r\n                      1.0, 0.0, 1.0,\r\n                      1.0, 1.0, 0.0);\r\n\r\n  const mat3 Mi = mat3(-0.5, 0.5, 0.5,\r\n                        0.5,-0.5, 0.5,\r\n                        0.5, 0.5,-0.5);\r\n#endif\r\n\r\n  vec3 uvw;\r\n\r\n  // Transform to simplex space (tetrahedral grid)\r\n#ifndef PERLINGRID\r\n  // Use matrix multiplication, let the compiler optimise\r\n  uvw = M * x;\r\n#else\r\n  // Optimised transformation to uvw (slightly faster than\r\n  // the equivalent matrix multiplication on most platforms)\r\n  uvw = x + dot(x, vec3(1.0/3.0));\r\n#endif\r\n\r\n  // Determine which simplex we're in, i0 is the \"base corner\"\r\n  vec3 i0 = floor(uvw);\r\n  vec3 f0 = fract(uvw); // coords within \"skewed cube\"\r\n\r\n  // To determine which simplex corners are closest, rank order the\r\n  // magnitudes of u,v,w, resolving ties in priority order u,v,w,\r\n  // and traverse the four corners from largest to smallest magnitude.\r\n  // o1, o2 are offsets in simplex space to the 2nd and 3rd corners.\r\n  vec3 g_ = step(f0.xyx, f0.yzz); // Makes comparison \"less-than\"\r\n  vec3 l_ = 1.0 - g_;             // complement is \"greater-or-equal\"\r\n  vec3 g = vec3(l_.z, g_.xy);\r\n  vec3 l = vec3(l_.xy, g_.z);\r\n  vec3 o1 = min( g, l );\r\n  vec3 o2 = max( g, l );\r\n\r\n  // Enumerate the remaining simplex corners\r\n  vec3 i1 = i0 + o1;\r\n  vec3 i2 = i0 + o2;\r\n  vec3 i3 = i0 + vec3(1.0);\r\n\r\n  vec3 v0, v1, v2, v3;\r\n\r\n  // Transform the corners back to texture space\r\n#ifndef PERLINGRID\r\n  v0 = Mi * i0;\r\n  v1 = Mi * i1;\r\n  v2 = Mi * i2;\r\n  v3 = Mi * i3;\r\n#else\r\n  // Optimised transformation (mostly slightly faster than a matrix)\r\n  v0 = i0 - dot(i0, vec3(1.0/6.0));\r\n  v1 = i1 - dot(i1, vec3(1.0/6.0));\r\n  v2 = i2 - dot(i2, vec3(1.0/6.0));\r\n  v3 = i3 - dot(i3, vec3(1.0/6.0));\r\n#endif\r\n\r\n  // Compute vectors to each of the simplex corners\r\n  vec3 x0 = x - v0;\r\n  vec3 x1 = x - v1;\r\n  vec3 x2 = x - v2;\r\n  vec3 x3 = x - v3;\r\n\r\n  if(any(greaterThan(period, vec3(0.0)))) {\r\n    // Wrap to periods and transform back to simplex space\r\n    vec4 vx = vec4(v0.x, v1.x, v2.x, v3.x);\r\n    vec4 vy = vec4(v0.y, v1.y, v2.y, v3.y);\r\n    vec4 vz = vec4(v0.z, v1.z, v2.z, v3.z);\r\n\t// Wrap to periods where specified\r\n\tif(period.x > 0.0) vx = mod(vx, period.x);\r\n\tif(period.y > 0.0) vy = mod(vy, period.y);\r\n\tif(period.z > 0.0) vz = mod(vz, period.z);\r\n    // Transform back\r\n#ifndef PERLINGRID\r\n    i0 = M * vec3(vx.x, vy.x, vz.x);\r\n    i1 = M * vec3(vx.y, vy.y, vz.y);\r\n    i2 = M * vec3(vx.z, vy.z, vz.z);\r\n    i3 = M * vec3(vx.w, vy.w, vz.w);\r\n#else\r\n    v0 = vec3(vx.x, vy.x, vz.x);\r\n    v1 = vec3(vx.y, vy.y, vz.y);\r\n    v2 = vec3(vx.z, vy.z, vz.z);\r\n    v3 = vec3(vx.w, vy.w, vz.w);\r\n    // Transform wrapped coordinates back to uvw\r\n    i0 = v0 + dot(v0, vec3(1.0/3.0));\r\n    i1 = v1 + dot(v1, vec3(1.0/3.0));\r\n    i2 = v2 + dot(v2, vec3(1.0/3.0));\r\n    i3 = v3 + dot(v3, vec3(1.0/3.0));\r\n#endif\r\n\t// Fix rounding errors\r\n    i0 = floor(i0 + 0.5);\r\n    i1 = floor(i1 + 0.5);\r\n    i2 = floor(i2 + 0.5);\r\n    i3 = floor(i3 + 0.5);\r\n  }\r\n\r\n  // Compute one pseudo-random hash value for each corner\r\n  vec4 hash = permute( permute( permute( \r\n              vec4(i0.z, i1.z, i2.z, i3.z ))\r\n            + vec4(i0.y, i1.y, i2.y, i3.y ))\r\n            + vec4(i0.x, i1.x, i2.x, i3.x ));\r\n\r\n  // Compute generating gradients from a Fibonacci spiral on the unit sphere\r\n  vec4 theta = hash * 3.883222077;  // 2*pi/golden ratio\r\n  vec4 sz    = hash * -0.006920415 + 0.996539792; // 1-(hash+0.5)*2/289\r\n  vec4 psi   = hash * 0.108705628 ; // 10*pi/289, chosen to avoid correlation\r\n\r\n  vec4 Ct = cos(theta);\r\n  vec4 St = sin(theta);\r\n  vec4 sz_prime = sqrt( 1.0 - sz*sz ); // s is a point on a unit fib-sphere\r\n\r\n  vec4 gx, gy, gz;\r\n\r\n  // Rotate gradients by angle alpha around a pseudo-random ortogonal axis\r\n#ifdef FASTROTATION\r\n  // Fast algorithm, but without dynamic shortcut for alpha = 0\r\n  vec4 qx = St;         // q' = norm ( cross(s, n) )  on the equator\r\n  vec4 qy = -Ct; \r\n  vec4 qz = vec4(0.0);\r\n\r\n  vec4 px =  sz * qy;   // p' = cross(q, s)\r\n  vec4 py = -sz * qx;\r\n  vec4 pz = sz_prime;\r\n\r\n  psi += alpha;         // psi and alpha in the same plane\r\n  vec4 Sa = sin(psi);\r\n  vec4 Ca = cos(psi);\r\n\r\n  gx = Ca * px + Sa * qx;\r\n  gy = Ca * py + Sa * qy;\r\n  gz = Ca * pz + Sa * qz;\r\n#else\r\n  // Slightly slower algorithm, but with g = s for alpha = 0, and a\r\n  // useful conditional speedup for alpha = 0 across all fragments\r\n  if(alpha != 0.0) {\r\n    vec4 Sp = sin(psi);          // q' from psi on equator\r\n    vec4 Cp = cos(psi);\r\n\r\n    vec4 px = Ct * sz_prime;     // px = sx\r\n    vec4 py = St * sz_prime;     // py = sy\r\n    vec4 pz = sz;\r\n\r\n    vec4 Ctp = St*Sp - Ct*Cp;    // q = (rotate( cross(s,n), dot(s,n))(q')\r\n    vec4 qx = mix( Ctp*St, Sp, sz);\r\n    vec4 qy = mix(-Ctp*Ct, Cp, sz);\r\n    vec4 qz = -(py*Cp + px*Sp);\r\n\r\n    vec4 Sa = vec4(sin(alpha));       // psi and alpha in different planes\r\n    vec4 Ca = vec4(cos(alpha));\r\n\r\n    gx = Ca * px + Sa * qx;\r\n    gy = Ca * py + Sa * qy;\r\n    gz = Ca * pz + Sa * qz;\r\n  }\r\n  else {\r\n    gx = Ct * sz_prime;  // alpha = 0, use s directly as gradient\r\n    gy = St * sz_prime;\r\n    gz = sz;  \r\n  }\r\n#endif\r\n\r\n  // Reorganize for dot products below\r\n  vec3 g0 = vec3(gx.x, gy.x, gz.x);\r\n  vec3 g1 = vec3(gx.y, gy.y, gz.y);\r\n  vec3 g2 = vec3(gx.z, gy.z, gz.z);\r\n  vec3 g3 = vec3(gx.w, gy.w, gz.w);\r\n\r\n  // Radial decay with distance from each simplex corner\r\n  vec4 w = 0.5 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3));\r\n  w = max(w, 0.0);\r\n  vec4 w2 = w * w;\r\n  vec4 w3 = w2 * w;\r\n\r\n  // The value of the linear ramp from each of the corners\r\n  vec4 gdotx = vec4(dot(g0,x0), dot(g1,x1), dot(g2,x2), dot(g3,x3));\r\n\r\n  // Multiply by the radial decay and sum up the noise value\r\n  float n = dot(w3, gdotx);\r\n\r\n  // Compute the first order partial derivatives\r\n  vec4 dw = -6.0 * w2 * gdotx;\r\n  vec3 dn0 = w3.x * g0 + dw.x * x0;\r\n  vec3 dn1 = w3.y * g1 + dw.y * x1;\r\n  vec3 dn2 = w3.z * g2 + dw.z * x2;\r\n  vec3 dn3 = w3.w * g3 + dw.w * x3;\r\n  gradient = 39.5 * (dn0 + dn1 + dn2 + dn3);\r\n\r\n  // Scale the return value to fit nicely into the range [-1,1]\r\n  return 39.5 * n;\r\n}","import { AdditiveBlending, BufferAttribute, BufferGeometry, Color, HalfFloatType, MathUtils, Points, ShaderMaterial, Vector2 } from 'three'\nimport { GPUComputationRenderer } from 'three/examples/jsm/misc/GPUComputationRenderer.js'\nimport three from '../../three'\nimport { colorScale } from '../../tools/color'\nimport psrdnoise from '../../glsl/psrdnoise3.glsl'\n\nconst { randFloat: rnd, randFloatSpread: rndFS } = MathUtils\n\nconst defaultConfig = {\n  gpgpuSize: 256,\n  colors: [0x00ff00, 0x0000ff],\n  color: 0xff0000,\n  coordScale: 1.5,\n  noiseIntensity: 0.001,\n  noiseTimeCoef: 0.0001,\n  pointSize: 5,\n  pointDecay: 0.005,\n  sleepRadiusX: 250,\n  sleepRadiusY: 250,\n  sleepTimeCoefX: 0.001,\n  sleepTimeCoefY: 0.002\n}\n\nexport default function (params) {\n  const config = { ...defaultConfig, ...params }\n\n  const WIDTH = config.gpgpuSize\n  const COUNT = WIDTH * WIDTH\n\n  let gpu\n  let dtPosition, dtVelocity\n  let velocityVariable, positionVariable\n\n  const uTime = { value: 0 }\n  const uCoordScale = { value: config.coordScale }\n  const uNoiseIntensity = { value: config.noiseIntensity }\n  const uPointSize = { value: config.pointSize }\n  const uPointDecay = { value: config.pointDecay }\n  const uColor = { value: new Color(config.color) }\n  const uMouse = { value: new Vector2() }\n  const uMouseDirection = { value: new Vector2() }\n  const uniforms = { uTime, uCoordScale, uNoiseIntensity, uPointSize, uPointDecay, uColor, uMouse, uMouseDirection }\n\n  let geometry, material, mesh\n\n  let hover = false\n  const mouseTarget = new Vector2()\n\n  three({\n    ...commonConfig(params),\n    antialias: false,\n    initRenderer ({ renderer }) {\n      initGPU(renderer)\n    },\n    initScene ({ scene }) {\n      initParticles()\n      scene.add(mesh)\n    },\n    beforeRender ({ width, wWidth, wHeight, clock, pointer }) {\n      if (!hover) {\n        const t1 = clock.time * config.sleepTimeCoefX\n        const t2 = clock.time * config.sleepTimeCoefY\n        const cos = Math.cos(t1)\n        const sin = Math.sin(t2)\n        const r1 = config.sleepRadiusX * wWidth / width\n        const r2 = config.sleepRadiusY * wWidth / width\n        mouseTarget.x = r1 * cos\n        mouseTarget.y = r2 * sin\n      } else {\n        mouseTarget.x = pointer.nPosition.x * 0.5 * wWidth\n        mouseTarget.y = pointer.nPosition.y * 0.5 * wHeight\n      }\n      uMouse.value.lerp(mouseTarget, 0.05)\n\n      uTime.value = clock.time * config.noiseTimeCoef\n      gpu.compute()\n      material.uniforms.texturePosition.value = gpu.getCurrentRenderTarget(positionVariable).texture\n      material.uniforms.textureVelocity.value = gpu.getCurrentRenderTarget(velocityVariable).texture\n    },\n    onPointerMove ({ delta }) {\n      hover = true\n      uMouseDirection.value.copy(delta)\n    },\n    onPointerLeave () {\n      hover = false\n    }\n  })\n\n  return { config, uniforms }\n\n  /**\n   */\n  function initGPU (renderer) {\n    gpu = new GPUComputationRenderer(WIDTH, WIDTH, renderer)\n    if (!renderer.capabilities.isWebGL2) {\n      gpu.setDataType(HalfFloatType)\n    }\n\n    dtPosition = gpu.createTexture()\n    dtVelocity = gpu.createTexture()\n    initTextures(dtPosition, dtVelocity)\n\n    velocityVariable = gpu.addVariable('textureVelocity', `\n      ${psrdnoise}\n      uniform float uTime;\n      uniform float uCoordScale;\n      uniform float uNoiseIntensity;\n      void main() {\n        vec2 uv = gl_FragCoord.xy / resolution.xy;\n        vec4 pos = texture2D(texturePosition, uv);\n        vec4 vel = texture2D(textureVelocity, uv);\n\n        if (pos.w < 0.0) {\n          vel.x = 0.0;\n          vel.y = 0.0;\n          vel.z = 0.0;\n        } else {\n          vec3 grad;\n          vec3 p = vec3(0.0);\n          float n = psrdnoise(pos.xyz * uCoordScale, p, uTime, grad);\n          vel.xyz += grad * uNoiseIntensity * pos.w;\n        }\n        gl_FragColor = vel;\n      }\n    `, dtVelocity)\n\n    positionVariable = gpu.addVariable('texturePosition', `\n      uniform float uPointDecay;\n      uniform vec2 uMouse;\n      uniform vec2 uMouseDirection;\n      void main() {\n        vec2 uv = gl_FragCoord.xy / resolution.xy;\n        vec4 pos = texture2D(texturePosition, uv);\n        vec4 vel = texture2D(textureVelocity, uv);\n        if (pos.w < 0.0) { pos.w = vel.w; }\n        pos.w -= uPointDecay;\n        if (pos.w <= 0.0) {\n          pos.xy = uMouse.xy;\n          pos.z = 0.0;\n        } else {\n          pos.xyz += vel.xyz;\n        }\n        gl_FragColor = pos;\n      }\n    `, dtPosition)\n\n    gpu.setVariableDependencies(velocityVariable, [positionVariable, velocityVariable])\n    gpu.setVariableDependencies(positionVariable, [positionVariable, velocityVariable])\n\n    Object.keys(uniforms).forEach(key => {\n      velocityVariable.material.uniforms[key] = uniforms[key]\n      positionVariable.material.uniforms[key] = uniforms[key]\n    })\n\n    const error = gpu.init()\n    if (error !== null) {\n      console.error(error)\n    }\n  }\n\n  /**\n   */\n  function initParticles () {\n    geometry = new BufferGeometry()\n    const positions = new Float32Array(COUNT * 3)\n    const uvs = new Float32Array(COUNT * 2)\n    const colors = new Float32Array(COUNT * 3)\n\n    for (let i = 0; i < COUNT * 3; i += 3) {\n      positions[i] = 0\n      positions[i + 1] = 0\n      positions[i + 2] = 0\n    }\n\n    let index = 0\n    for (let j = 0; j < WIDTH; j++) {\n      for (let i = 0; i < WIDTH; i++) {\n        uvs[index++] = i / (WIDTH - 1)\n        uvs[index++] = j / (WIDTH - 1)\n      }\n    }\n\n    const cscale = colorScale(config.colors)\n    for (let i = 0; i < COUNT * 3; i += 3) {\n      const color = cscale.getColorAt(Math.random())\n      colors[i] = color.r\n      colors[i + 1] = color.g\n      colors[i + 2] = color.b\n    }\n\n    geometry.setAttribute('position', new BufferAttribute(positions, 3))\n    geometry.setAttribute('uv', new BufferAttribute(uvs, 2))\n    geometry.setAttribute('color', new BufferAttribute(colors, 3))\n\n    material = new ShaderMaterial({\n      blending: AdditiveBlending,\n      depthTest: false,\n      transparent: true,\n      vertexColors: true,\n      uniforms: {\n        texturePosition: { value: null },\n        textureVelocity: { value: null },\n        uPointSize,\n        uColor\n      },\n      vertexShader: `\n        uniform sampler2D texturePosition;\n        uniform sampler2D textureVelocity;\n        uniform float uPointSize;\n        varying vec4 vPos;\n        varying vec4 vVel;\n        varying vec3 vCol;\n        void main() {\n          vCol = color;\n          vPos = texture2D(texturePosition, uv);\n          vVel = texture2D(textureVelocity, uv);\n          vec4 mvPosition = modelViewMatrix * vec4(vPos.xyz, 1.0);\n          // gl_PointSize = smoothstep(0.0, 2.0, vPos.w) * uPointSize;\n          gl_PointSize = vPos.w * (vVel.w + 0.5) * uPointSize;\n          gl_Position = projectionMatrix * mvPosition;\n        }\n      `,\n      fragmentShader: `\n        uniform vec3 uColor;\n        varying vec4 vPos;\n        varying vec4 vVel;\n        varying vec3 vCol;\n        void main() {\n          float dist = length(gl_PointCoord - 0.5);\n          if (dist > 0.5) discard;\n          // float a = smoothstep(0.0, 1.0, vPos.w);\n          gl_FragColor = vec4(mix(vCol, uColor, vPos.w), vPos.w);\n        }\n      `\n    })\n\n    mesh = new Points(geometry, material)\n    mesh.matrixAutoUpdate = false\n    mesh.updateMatrix()\n  }\n\n  /**\n   */\n  function initTextures (texturePosition, textureVelocity) {\n    const posArray = texturePosition.image.data\n    const velArray = textureVelocity.image.data\n    for (let k = 0, kl = posArray.length; k < kl; k += 4) {\n      posArray[k + 0] = rndFS(1)\n      posArray[k + 1] = rndFS(1)\n      posArray[k + 2] = -100000\n      posArray[k + 3] = rnd(0.1, 1)\n\n      velArray[k + 0] = 0 // rndFS(0.2)\n      velArray[k + 1] = 0 // rndFS(0.2)\n      velArray[k + 2] = 0 // rndFS(0.2)\n      velArray[k + 3] = rnd(0.1, 1)\n    }\n  }\n}\n\n/**\n */\nfunction commonConfig (params) {\n  const config = {}\n  const keys = ['el', 'canvas', 'width', 'height', 'resize']\n  keys.forEach(key => {\n    if (params[key] !== undefined) config[key] = params[key]\n  })\n  return config\n}\n","import { CanvasTexture } from 'three'\r\n\r\nconst defaultConfig = {\r\n  width: 256,\r\n  height: 256\r\n}\r\n\r\nexport default function (params) {\r\n  const config = { ...defaultConfig, ...params }\r\n\r\n  const canvas = document.createElement('canvas')\r\n  canvas.width = config.width\r\n  canvas.height = config.height\r\n\r\n  const ctx = canvas.getContext('2d')\r\n\r\n  const texture = new CanvasTexture(ctx.canvas)\r\n\r\n  return { canvas, ctx, texture }\r\n}\r\n","//\r\n// psrdnoise2.glsl\r\n//\r\n// Authors: Stefan Gustavson (stefan.gustavson@gmail.com)\r\n// and Ian McEwan (ijm567@gmail.com)\r\n// Version 2021-12-02, published under the MIT license (see below)\r\n//\r\n// Copyright (c) 2021 Stefan Gustavson and Ian McEwan.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the \"Software\"),\r\n// to deal in the Software without restriction, including without limitation\r\n// the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n// and/or sell copies of the Software, and to permit persons to whom the\r\n// Software is furnished to do so, subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\r\n// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n// DEALINGS IN THE SOFTWARE.\r\n//\r\n\r\n//\r\n// Periodic (tiling) 2-D simplex noise (hexagonal lattice gradient noise)\r\n// with rotating gradients and analytic derivatives.\r\n//\r\n// This is (yet) another variation on simplex noise. Unlike previous\r\n// implementations, the grid is axis-aligned and slightly stretched in\r\n// the y direction to permit rectangular tiling.\r\n// The noise pattern can be made to tile seamlessly to any integer period\r\n// in x and any even integer period in y. Odd periods may be specified\r\n// for y, but then the actual tiling period will be twice that number.\r\n//\r\n// The rotating gradients give the appearance of a swirling motion, and\r\n// can serve a similar purpose for animation as motion along z in 3-D\r\n// noise. The rotating gradients in conjunction with the analytic\r\n// derivatives allow for \"flow noise\" effects as presented by Ken\r\n// Perlin and Fabrice Neyret.\r\n//\r\n\r\n\r\n//\r\n// 2-D tiling simplex noise with rotating gradients and analytical derivative.\r\n// \"vec2 x\" is the point (x,y) to evaluate,\r\n// \"vec2 period\" is the desired periods along x and y, and\r\n// \"float alpha\" is the rotation (in radians) for the swirling gradients.\r\n// The \"float\" return value is the noise value, and\r\n// the \"out vec2 gradient\" argument returns the x,y partial derivatives.\r\n//\r\n// Setting either period to 0.0 or a negative value will skip the wrapping\r\n// along that dimension. Setting both periods to 0.0 makes the function\r\n// execute about 15% faster.\r\n//\r\n// Not using the return value for the gradient will make the compiler\r\n// eliminate the code for computing it. This speeds up the function\r\n// by 10-15%.\r\n//\r\n// The rotation by alpha uses one single addition. Unlike the 3-D version\r\n// of psrdnoise(), setting alpha == 0.0 gives no speedup.\r\n//\r\nfloat psrdnoise(vec2 x, vec2 period, float alpha, out vec2 gradient) {\r\n\r\n\t// Transform to simplex space (axis-aligned hexagonal grid)\r\n\tvec2 uv = vec2(x.x + x.y*0.5, x.y);\r\n\r\n\t// Determine which simplex we're in, with i0 being the \"base\"\r\n\tvec2 i0 = floor(uv);\r\n\tvec2 f0 = fract(uv);\r\n\t// o1 is the offset in simplex space to the second corner\r\n\tfloat cmp = step(f0.y, f0.x);\r\n\tvec2 o1 = vec2(cmp, 1.0-cmp);\r\n\r\n\t// Enumerate the remaining simplex corners\r\n\tvec2 i1 = i0 + o1;\r\n\tvec2 i2 = i0 + vec2(1.0, 1.0);\r\n\r\n\t// Transform corners back to texture space\r\n\tvec2 v0 = vec2(i0.x - i0.y * 0.5, i0.y);\r\n\tvec2 v1 = vec2(v0.x + o1.x - o1.y * 0.5, v0.y + o1.y);\r\n\tvec2 v2 = vec2(v0.x + 0.5, v0.y + 1.0);\r\n\r\n\t// Compute vectors from v to each of the simplex corners\r\n\tvec2 x0 = x - v0;\r\n\tvec2 x1 = x - v1;\r\n\tvec2 x2 = x - v2;\r\n\r\n\tvec3 iu, iv;\r\n\tvec3 xw, yw;\r\n\r\n\t// Wrap to periods, if desired\r\n\tif(any(greaterThan(period, vec2(0.0)))) {\r\n\t\txw = vec3(v0.x, v1.x, v2.x);\r\n\t\tyw = vec3(v0.y, v1.y, v2.y);\r\n\t\tif(period.x > 0.0)\r\n\t\t\txw = mod(vec3(v0.x, v1.x, v2.x), period.x);\r\n\t\tif(period.y > 0.0)\r\n\t\t\tyw = mod(vec3(v0.y, v1.y, v2.y), period.y);\r\n\t\t// Transform back to simplex space and fix rounding errors\r\n\t\tiu = floor(xw + 0.5*yw + 0.5);\r\n\t\tiv = floor(yw + 0.5);\r\n\t} else { // Shortcut if neither x nor y periods are specified\r\n\t\tiu = vec3(i0.x, i1.x, i2.x);\r\n\t\tiv = vec3(i0.y, i1.y, i2.y);\r\n\t}\r\n\r\n\t// Compute one pseudo-random hash value for each corner\r\n\tvec3 hash = mod(iu, 289.0);\r\n\thash = mod((hash*51.0 + 2.0)*hash + iv, 289.0);\r\n\thash = mod((hash*34.0 + 10.0)*hash, 289.0);\r\n\r\n\t// Pick a pseudo-random angle and add the desired rotation\r\n\tvec3 psi = hash * 0.07482 + alpha;\r\n\tvec3 gx = cos(psi);\r\n\tvec3 gy = sin(psi);\r\n\r\n\t// Reorganize for dot products below\r\n\tvec2 g0 = vec2(gx.x,gy.x);\r\n\tvec2 g1 = vec2(gx.y,gy.y);\r\n\tvec2 g2 = vec2(gx.z,gy.z);\r\n\r\n\t// Radial decay with distance from each simplex corner\r\n\tvec3 w = 0.8 - vec3(dot(x0, x0), dot(x1, x1), dot(x2, x2));\r\n\tw = max(w, 0.0);\r\n\tvec3 w2 = w * w;\r\n\tvec3 w4 = w2 * w2;\r\n\r\n\t// The value of the linear ramp from each of the corners\r\n\tvec3 gdotx = vec3(dot(g0, x0), dot(g1, x1), dot(g2, x2));\r\n\r\n\t// Multiply by the radial decay and sum up the noise value\r\n\tfloat n = dot(w4, gdotx);\r\n\r\n\t// Compute the first order partial derivatives\r\n\tvec3 w3 = w2 * w;\r\n\tvec3 dw = -8.0 * w3 * gdotx;\r\n\tvec2 dn0 = w4.x * g0 + dw.x * x0;\r\n\tvec2 dn1 = w4.y * g1 + dw.y * x1;\r\n\tvec2 dn2 = w4.z * g2 + dw.z * x2;\r\n\tgradient = 10.9 * (dn0 + dn1 + dn2);\r\n\r\n\t// Scale the return value to fit nicely into the range [-1,1]\r\n\treturn 10.9 * n;\r\n}","import { Mesh, PlaneGeometry, ShaderMaterial, Vector2 } from 'three'\nimport three from '../../three'\nimport useCanvasTexture from '../../tools/canvasTexture'\nimport psrdnoise from '../../glsl/psrdnoise2.glsl'\nimport { colorScale } from '../../tools/color'\n\nconst defaultConfig = {\n  colors: [0xffffff, 0x000000],\n  minStroke: 5,\n  maxStroke: 5,\n  timeCoef: 0.0005,\n  coordScale: 2,\n  displacementScale: 0.002,\n  mouseScale: 0.25,\n  mouseLerp: 0.025\n}\n\nexport default function (params) {\n  const config = { ...defaultConfig, ...params }\n\n  const canvasTexture = useCanvasTexture({ width: 1, height: 4096 })\n  drawTexture()\n\n  const uniforms = {\n    uMap: { value: canvasTexture.texture },\n    uTime: { value: 0 },\n    uCoordScale: { value: config.coordScale },\n    uDisplacementScale: { value: config.displacementScale },\n    uMouse: { value: new Vector2() }\n  }\n\n  const geometry = new PlaneGeometry()\n\n  const material = new ShaderMaterial({\n    uniforms,\n    vertexShader: `\n      varying vec2 vUv;\n      void main() {\n        vUv = uv;\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n      }\n    `,\n    fragmentShader: `\n      uniform sampler2D uMap;\n      uniform float uTime;\n      uniform float uCoordScale;\n      uniform float uDisplacementScale;\n      uniform vec2 uMouse;\n      varying vec2 vUv;\n      ${psrdnoise}\n      void main() {\n        vec2 p = vec2(0.0);\n        vec2 grad;\n        float n = psrdnoise(vUv * uCoordScale + uMouse, p, uTime, grad);\n        // grad *= uCoordScale;\n        vec2 uv = vUv + uDisplacementScale * grad;\n        gl_FragColor = texture2D(uMap, uv.yx);\n      }\n    `\n  })\n\n  const mesh = new Mesh(geometry, material)\n\n  const mouseTarget = new Vector2()\n\n  const threeConfig = {}\n  const keys = ['el', 'canvas', 'width', 'height', 'resize']\n  keys.forEach(key => {\n    if (params[key] !== undefined) threeConfig[key] = params[key]\n  })\n\n  three({\n    ...threeConfig,\n    antialias: true,\n    initScene ({ camera, scene, wWidth, wHeight }) {\n      mesh.scale.set(wWidth * 2, wHeight * 2, 1)\n      scene.add(mesh)\n\n      camera.position.set(0, -30, 7)\n      camera.lookAt(0, -19, 0)\n    },\n    beforeRender ({ clock }) {\n      uniforms.uTime.value = clock.time * config.timeCoef\n      uniforms.uMouse.value.lerp(mouseTarget, config.mouseLerp)\n    },\n    onPointerMove ({ nPosition }) {\n      mouseTarget.set(-nPosition.x, nPosition.y).multiplyScalar(config.mouseScale)\n    },\n    onPointerLeave () {\n      mouseTarget.set(0, 0)\n    }\n  })\n\n  return { config, uniforms, drawTexture }\n\n  function drawTexture () {\n    const ctx = canvasTexture.ctx\n    ctx.lineWidth = 0\n\n    const { width, height } = canvasTexture.canvas\n    const cscale = colorScale(config.colors)\n\n    let y = 0\n    let dy\n    while (y < height) {\n      dy = config.minStroke + Math.random() * (config.maxStroke - config.minStroke)\n\n      // ctx.strokeStyle = cscale.getColorAt(Math.random()).getStyle()\n      // ctx.lineWidth = dy + 1\n      // ctx.beginPath()\n      // ctx.moveTo(0, y + dy / 2)\n      // ctx.lineTo(width, y + dy / 2)\n      // ctx.stroke()\n      // ctx.closePath()\n\n      ctx.fillStyle = cscale.getColorAt(Math.random()).getStyle()\n      ctx.beginPath()\n      ctx.rect(0, y - 1, width, dy + 1)\n      ctx.fill()\n      ctx.closePath()\n\n      y += dy\n    }\n\n    canvasTexture.texture.needsUpdate = true\n  }\n}\n","import { Color, DoubleSide, HalfFloatType, InstancedBufferAttribute, InstancedMesh, MathUtils, MeshBasicMaterial, MeshPhongMaterial, MeshStandardMaterial, PlaneGeometry, TextureLoader, Vector3 } from 'three'\nimport { GPUComputationRenderer } from 'three/examples/jsm/misc/GPUComputationRenderer.js'\n\nimport three, { commonConfig, initLights } from '../../three'\nimport psrdnoise from '../../glsl/psrdnoise3.glsl'\nimport { colorScale } from '../../tools/color'\n\nconst { randFloat: rnd, randFloatSpread: rndFS } = MathUtils\n\nconst defaultConfig = {\n  gpgpuSize: 64,\n  background: 0xffffff,\n  material: 'basic',\n  materialParams: {},\n  texture: null,\n  textureCount: 1,\n  colors: [0xffffff, 0xffffff],\n  lights: [\n    { type: 'ambient', params: [0xffffff, 0.5] },\n    { type: 'directional', params: [0xffffff, 1], props: { position: [0, 10, 0] } }\n  ],\n  wingsScale: [1, 1, 1],\n  wingsWidthSegments: 8,\n  wingsHeightSegments: 8,\n  wingsSpeed: 0.75,\n  wingsDisplacementScale: 1.25,\n  noiseCoordScale: 0.01,\n  noiseTimeCoef: 0.0005,\n  noiseIntensity: 0.0025,\n  attractionRadius1: 100,\n  attractionRadius2: 150,\n  maxVelocity: 0.1\n}\n\nexport default function (params) {\n  const config = { ...defaultConfig, ...params }\n\n  if (!['basic', 'phong', 'standard'].includes(config.material)) {\n    throw new Error(`Invalid material ${config.material}`)\n  }\n\n  if (!Number.isInteger(config.wingsWidthSegments) || config.wingsWidthSegments % 2 !== 0) {\n    throw new Error(`Invalid wingsWidthSegments ${config.wingsWidthSegments}`)\n  }\n\n  const WIDTH = config.gpgpuSize\n  const COUNT = WIDTH * WIDTH\n\n  let gpu\n  let dtPosition, dtVelocity\n  let velocityVariable, positionVariable\n\n  const uTexturePosition = { value: null }\n  const uOldTexturePosition = { value: null }\n  const uTextureVelocity = { value: null }\n  const uTime = { value: 0 }\n  const uNoiseCoordScale = { value: config.noiseCoordScale }\n  const uNoiseIntensity = { value: config.noiseIntensity }\n  const uMaxVelocity = { value: config.maxVelocity }\n  const uAttractionRadius1 = { value: config.attractionRadius1 }\n  const uAttractionRadius2 = { value: config.attractionRadius2 }\n  const uWingsScale = { value: new Vector3(...config.wingsScale) }\n  const uWingsSpeed = { value: config.wingsSpeed }\n  const uWingsDisplacementScale = { value: config.wingsDisplacementScale }\n\n  const gpuTexturesUniforms = { uTexturePosition, uOldTexturePosition, uTextureVelocity }\n  const commonUniforms = { uTime, uNoiseCoordScale, uNoiseIntensity, uMaxVelocity, uAttractionRadius1, uAttractionRadius2, uWingsScale, uWingsSpeed, uWingsDisplacementScale }\n  const uniforms = { ...gpuTexturesUniforms, ...commonUniforms }\n\n  let geometry, material, iMesh\n\n  const _three = three({\n    ...commonConfig(params),\n    antialias: true,\n    orbitControls: true,\n    initRenderer ({ renderer }) {\n      initGPU(renderer)\n    },\n    initCamera ({ camera }) {\n      camera.position.set(0, 50, 70)\n    },\n    initScene ({ scene }) {\n      initScene(scene)\n    },\n    beforeRender ({ clock }) {\n      uTime.value = clock.time * config.noiseTimeCoef\n\n      gpu.compute()\n      uTexturePosition.value = positionVariable.renderTargets[gpu.currentTextureIndex].texture\n      uOldTexturePosition.value = positionVariable.renderTargets[gpu.currentTextureIndex === 0 ? 1 : 0].texture\n      uTextureVelocity.value = velocityVariable.renderTargets[gpu.currentTextureIndex].texture\n    }\n  })\n\n  return { three: _three, config, uniforms, setColors }\n\n  /**\n   */\n  function initGPU (renderer) {\n    gpu = new GPUComputationRenderer(WIDTH, WIDTH, renderer)\n    if (!renderer.capabilities.isWebGL2) {\n      gpu.setDataType(HalfFloatType)\n    }\n\n    dtPosition = gpu.createTexture()\n    dtVelocity = gpu.createTexture()\n    initTextures(dtPosition, dtVelocity)\n\n    velocityVariable = gpu.addVariable('textureVelocity', `\n      ${psrdnoise}\n      uniform float uTime;\n      uniform float uNoiseCoordScale;\n      uniform float uNoiseIntensity;\n      uniform float uMaxVelocity;\n      uniform float uAttractionRadius1;\n      uniform float uAttractionRadius2;\n      uniform float uWingsSpeed;\n      void main() {\n        vec2 uv = gl_FragCoord.xy / resolution.xy;\n        vec4 pos = texture2D(texturePosition, uv);\n        vec4 vel = texture2D(textureVelocity, uv);\n\n        vec3 grad;\n        float n = psrdnoise(pos.xyz * uNoiseCoordScale, vec3(0), uTime, grad);\n        grad = grad * uNoiseIntensity;\n        vel.xyz = vel.xyz + (pos.w * 0.75) * grad;\n\n        vec3 dv = -pos.xyz;\n        float coef = smoothstep(uAttractionRadius1, uAttractionRadius2, length(dv));\n        vel.xyz = vel.xyz + pos.w * coef * normalize(dv);\n        vel.xyz = clamp(vel.xyz, -uMaxVelocity, uMaxVelocity);\n\n        vel.w = mod(vel.w + length(vel.xyz) * (0.5 + pos.w) * uWingsSpeed, 6.2831853071);\n        gl_FragColor = vel;\n      }\n    `, dtVelocity)\n\n    positionVariable = gpu.addVariable('texturePosition', `\n      ${psrdnoise}\n      uniform float uTime;\n      void main() {\n        vec2 uv = gl_FragCoord.xy / resolution.xy;\n        vec4 pos = texture2D(texturePosition, uv);\n        vec4 vel = texture2D(textureVelocity, uv);\n        pos.xyz += vel.xyz;\n        gl_FragColor = pos;\n      }\n    `, dtPosition)\n\n    gpu.setVariableDependencies(velocityVariable, [positionVariable, velocityVariable])\n    gpu.setVariableDependencies(positionVariable, [positionVariable, velocityVariable])\n\n    Object.keys(commonUniforms).forEach(key => {\n      velocityVariable.material.uniforms[key] = uniforms[key]\n      positionVariable.material.uniforms[key] = uniforms[key]\n    })\n\n    const error = gpu.init()\n    if (error !== null) {\n      throw new Error(error)\n    }\n  }\n\n  /**\n   */\n  function initScene (scene) {\n    if (config.background !== undefined) {\n      scene.background = new Color(config.background)\n    }\n\n    initLights(scene, config.lights)\n\n    geometry = new PlaneGeometry(2, 2, config.wingsWidthSegments, config.wingsHeightSegments).rotateX(Math.PI / 2)\n\n    const gpuUvs = new Float32Array(COUNT * 2)\n    const mapIndexes = new Float32Array(COUNT)\n    let i1 = 0\n    let i2 = 0\n    for (let j = 0; j < WIDTH; j++) {\n      for (let i = 0; i < WIDTH; i++) {\n        gpuUvs[i1++] = i / (WIDTH - 1)\n        gpuUvs[i1++] = j / (WIDTH - 1)\n        mapIndexes[i2++] = Math.floor(Math.random() * config.textureCount)\n      }\n    }\n    geometry.setAttribute('gpuUv', new InstancedBufferAttribute(gpuUvs, 2))\n    geometry.setAttribute('mapIndex', new InstancedBufferAttribute(mapIndexes, 1))\n\n    const materialParams = { side: DoubleSide, ...config.materialParams }\n    if (config.texture) {\n      materialParams.map = new TextureLoader().load(config.texture)\n    }\n\n    materialParams.onBeforeCompile = shader => {\n      shader.defines = {\n        COMPUTE_NORMALS: config.material !== 'basic',\n        WINGS_WIDTH_SEGMENTS: config.wingsWidthSegments,\n        WINGS_HEIGHT_SEGMENTS: config.wingsHeightSegments,\n        WINGS_DX: (2.0 / config.wingsWidthSegments).toFixed(10),\n        WINGS_DZ: (2.0 / config.wingsHeightSegments).toFixed(10),\n        TEXTURE_COUNT: config.textureCount.toFixed(10)\n      }\n      Object.keys(uniforms).forEach(key => {\n        shader.uniforms[key] = uniforms[key]\n      })\n      shader.vertexShader = `\n        uniform sampler2D uTexturePosition;\n        uniform sampler2D uOldTexturePosition;\n        uniform sampler2D uTextureVelocity;\n        uniform vec3 uWingsScale;\n        uniform float uWingsDisplacementScale;\n        attribute vec2 gpuUv;\n        attribute float mapIndex;\n        varying vec4 vPos;\n        varying vec4 vVel;\n        varying float vMapIndex;\n\n        mat3 lookAt(vec3 origin, vec3 target, vec3 up) {\n          vec3 z = target - origin;\n          if (z.x * z.x + z.y * z.y + z.z * z.z == 0.0) { z.z = 1.0; }\n          z = normalize(z);\n          vec3 x = cross(up, z);\n          if (x.x * x.x + x.y * x.y + x.z * x.z == 0.0) {\n            if (abs(up.z) == 1.0) { z.x += 0.0001; }\n            else { z.z += 0.0001; }\n            x = cross(up, z);\n          }\n          x = normalize(x);\n          vec3 y = cross(z, x);\n          return mat3(x, y, z);\n        }\n\n        mat4 iMatrix(vec3 pos, mat3 rmat, vec3 scale) {\n          return mat4(\n            rmat[0][0] * scale.x, rmat[0][1] * scale.x, rmat[0][2] * scale.x, 0.0,\n            rmat[1][0] * scale.y, rmat[1][1] * scale.y, rmat[1][2] * scale.y, 0.0,\n            rmat[2][0] * scale.z, rmat[2][1] * scale.z, rmat[2][2] * scale.z, 0.0,\n            pos.x, pos.y, pos.z, 1.0\n          );\n        }\n      ` + shader.vertexShader\n      shader.vertexShader = shader.vertexShader.replace('#include <defaultnormal_vertex>', '')\n      shader.vertexShader = shader.vertexShader.replace('#include <normal_vertex>', '')\n      shader.vertexShader = shader.vertexShader.replace('#include <begin_vertex>', `\n        vPos = texture2D(uTexturePosition, gpuUv);\n        vec4 oldPos = texture2D(uOldTexturePosition, gpuUv);\n        vVel = texture2D(uTextureVelocity, gpuUv);\n        vMapIndex = float(mapIndex);\n\n        mat3 rmat = lookAt(oldPos.xyz, vPos.xyz, vec3(0, 1, 0));\n        mat4 im = iMatrix(vPos.xyz, rmat, (0.5 + vPos.w) * uWingsScale);\n\n        vec3 transformed = vec3(position);\n\n        #ifdef COMPUTE_NORMALS\n          vec3 transformedNormal = objectNormal; \n        #endif\n\n        float dx = abs(transformed.x);\n        if (dx > 0.0) {\n          float sdx = smoothstep(0.0, 1.0 + WINGS_DX, dx);\n          #if WINGS_HEIGHT_SEGMENTS > 1\n            float dz = transformed.z + 1.0;\n            float sdz = smoothstep(0.0, 2.0 + WINGS_DZ, dz);\n            transformed.y = sin(vVel.w - sdx + sdz) * sdx * uWingsDisplacementScale;\n          #else\n            transformed.y = sin(vVel.w - sdx) * sdx * uWingsDisplacementScale;\n          #endif\n\n          #ifdef COMPUTE_NORMALS\n            #if WINGS_HEIGHT_SEGMENTS > 1\n              float s = sign(transformed.x);\n              float sdx1 = smoothstep(0.0, 1.0 + WINGS_DX, dx + WINGS_DX);\n              float sdz1 = smoothstep(0.0, 2.0 + WINGS_DZ, dz + WINGS_DZ);\n              float dvy1 = sin(vVel.w - sdx + sdz1) * sdx * uWingsDisplacementScale - transformed.y;\n              float dvy2 = sin(vVel.w - sdx1 + sdz) * sdx1 * uWingsDisplacementScale - transformed.y;\n              vec3 v1 = vec3(0.0, dvy1, s * WINGS_DZ);\n              vec3 v2 = vec3(s * WINGS_DX, dvy2, 0.0);\n              transformedNormal = -normalize(cross(v1, v2));\n            #else\n              float s = sign(transformed.x);\n              float sdx1 = smoothstep(0.0, 1.0 + WINGS_DX, dx + WINGS_DX);\n              float dvy1 = sin(vVel.w - sdx1) * sdx * uWingsDisplacementScale - transformed.y;\n              vec3 v1 = vec3(0.0, 0.0, s);\n              vec3 v2 = vec3(s * WINGS_DX, dvy1, 0.0);\n              transformedNormal = -normalize(cross(v1, v2));\n            #endif  \n          #endif\n        }\n\n        #ifdef COMPUTE_NORMALS\n          #ifdef USE_INSTANCING\n            mat3 m = mat3( im );\n            transformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n            transformedNormal = m * transformedNormal;\n          #endif\n          transformedNormal = normalMatrix * transformedNormal;\n          #ifdef FLIP_SIDED\n            transformedNormal = - transformedNormal;\n          #endif\n          #ifdef USE_TANGENT\n            vec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n            #ifdef FLIP_SIDED\n              transformedTangent = - transformedTangent;\n            #endif\n          #endif\n          #ifndef FLAT_SHADED\n            vNormal = normalize( transformedNormal );\n            #ifdef USE_TANGENT\n              vTangent = normalize( transformedTangent );\n              vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n            #endif\n          #endif\n        #endif\n      `)\n\n      shader.vertexShader = shader.vertexShader.replace('#include <project_vertex>', `\n        vec4 mvPosition = vec4( transformed, 1.0 );\n        #ifdef USE_INSTANCING\n          mvPosition = im * mvPosition;\n        #endif\n        mvPosition = modelViewMatrix * mvPosition;\n        gl_Position = projectionMatrix * mvPosition;\n      `)\n\n      shader.fragmentShader = `\n        varying float vMapIndex;\n      ` + shader.fragmentShader\n      shader.fragmentShader = shader.fragmentShader.replace('#include <map_fragment>', `\n        #ifdef USE_MAP\n          vec2 uv = vUv;\n          uv.x = (vMapIndex + vUv.x) / TEXTURE_COUNT;\n          vec4 sampledDiffuseColor = texture2D(map, uv);\n          diffuseColor *= sampledDiffuseColor;\n        #endif\n      `)\n    }\n\n    switch (config.material) {\n      case 'standard' :\n        material = new MeshStandardMaterial(materialParams)\n        break\n      case 'phong' :\n        material = new MeshPhongMaterial(materialParams)\n        break\n      default :\n        material = new MeshBasicMaterial(materialParams)\n    }\n\n    iMesh = new InstancedMesh(geometry, material, COUNT)\n    setColors(config.colors)\n    scene.add(iMesh)\n  }\n\n  function setColors (colors) {\n    if (Array.isArray(colors) && colors.length > 1) {\n      const cscale = colorScale(colors)\n      for (let i = 0; i < COUNT; i++) {\n        iMesh.setColorAt(i, cscale.getColorAt(i / COUNT))\n      }\n      iMesh.instanceColor.needsUpdate = true\n    }\n  }\n\n  /**\n   */\n  function initTextures (texturePosition, textureVelocity) {\n    const posArray = texturePosition.image.data\n    const velArray = textureVelocity.image.data\n    for (let k = 0, kl = posArray.length; k < kl; k += 4) {\n      posArray[k + 0] = rndFS(150)\n      posArray[k + 1] = rndFS(150)\n      posArray[k + 2] = rndFS(150)\n      posArray[k + 3] = rnd(0.1, 1)\n\n      velArray[k + 0] = rndFS(0.5)\n      velArray[k + 1] = rndFS(0.5)\n      velArray[k + 2] = rndFS(0.5)\n      velArray[k + 3] = 0\n    }\n  }\n}\n","import { BoxGeometry, BufferGeometry, CapsuleGeometry, Color, ConeGeometry, DoubleSide, Float32BufferAttribute, HalfFloatType, InstancedBufferAttribute, InstancedMesh, MathUtils, MeshStandardMaterial, OctahedronGeometry, SphereGeometry, Vector2, Vector3 } from 'three'\nimport { GPUComputationRenderer } from 'three/examples/jsm/misc/GPUComputationRenderer.js'\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js'\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js'\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass.js'\n\nimport three, { commonConfig, initLights } from '../../three'\nimport psrdnoise from '../../glsl/psrdnoise3.glsl'\nimport { colorScale } from '../../tools/color'\n\nconst { randFloat: rnd, randFloatSpread: rndFS } = MathUtils\n\nconst defaultConfig = {\n  gpgpuSize: 256,\n  bloomStrength: 1.5,\n  bloomRadius: 0.5,\n  bloomThreshold: 0.25,\n  colors: [Math.random() * 0xffffff, Math.random() * 0xffffff, Math.random() * 0xffffff],\n  geometry: 'custom',\n  geometryScale: [1, 1, 1],\n  lights: [\n    { type: 'ambient', params: [0xffffff, 0.5] },\n    { type: 'point', params: [0xffffff, 1], props: { position: [0, 0, 0] } },\n    { type: 'point', params: [0xff9060, 0.75], props: { position: [0, -100, -100] } },\n    { type: 'point', params: [0x6090ff, 0.75], props: { position: [0, 100, 100] } }\n  ],\n  materialParams: {},\n  noiseCoordScale: 0.01,\n  noiseIntensity: 0.0025,\n  noiseTimeCoef: 0.0004,\n  attractionRadius1: 150,\n  attractionRadius2: 250,\n  maxVelocity: 0.25\n}\n\nexport default function (params) {\n  const config = { ...defaultConfig, ...params }\n\n  const WIDTH = config.gpgpuSize\n  const COUNT = WIDTH * WIDTH\n\n  let gpu\n  let dtPosition, dtVelocity\n  let velocityVariable, positionVariable\n\n  const uTexturePosition = { value: null }\n  const uOldTexturePosition = { value: null }\n  const uTextureVelocity = { value: null }\n  const uScale = { value: new Vector3(...config.geometryScale) }\n  const uTime = { value: 0 }\n  const uNoiseCoordScale = { value: config.noiseCoordScale }\n  const uNoiseIntensity = { value: config.noiseIntensity }\n  const uMaxVelocity = { value: config.maxVelocity }\n  const uAttractionRadius1 = { value: config.attractionRadius1 }\n  const uAttractionRadius2 = { value: config.attractionRadius2 }\n  const uMouse = { value: new Vector3() }\n\n  const gpuTexturesUniforms = { uTexturePosition, uOldTexturePosition, uTextureVelocity }\n  const commonUniforms = { uScale, uTime, uNoiseCoordScale, uNoiseIntensity, uMaxVelocity, uAttractionRadius1, uAttractionRadius2, uMouse }\n  const uniforms = { ...gpuTexturesUniforms, ...commonUniforms }\n\n  let effectComposer\n  let renderPass, bloomPass\n\n  let camera\n  let geometry, material, iMesh\n\n  // const mousePlane = new Plane(new Vector3(0, 0, 1), 0)\n  // const mousePosition = new Vector3()\n  // const raycaster = new Raycaster()\n\n  const _three = three({\n    ...commonConfig(params),\n    antialias: false,\n    orbitControls: true,\n    initRenderer ({ renderer }) {\n      initGPU(renderer)\n    },\n    initCamera (three) {\n      camera = three.camera\n      camera.position.z = 70\n    },\n    initScene ({ renderer, width, height, camera, scene }) {\n      initScene(scene)\n\n      renderPass = new RenderPass(scene, camera)\n      bloomPass = new UnrealBloomPass(new Vector2(width, height), config.bloomStrength, config.bloomRadius, config.bloomThreshold)\n      effectComposer = new EffectComposer(renderer)\n      effectComposer.addPass(renderPass)\n      effectComposer.addPass(bloomPass)\n    },\n    afterResize ({ width, height }) {\n      if (effectComposer) effectComposer.setSize(width, height)\n    },\n    beforeRender ({ clock }) {\n      uTime.value = clock.time * config.noiseTimeCoef\n      // uMouse.value.copy(mousePosition)\n\n      gpu.compute()\n      uTexturePosition.value = positionVariable.renderTargets[gpu.currentTextureIndex].texture\n      uOldTexturePosition.value = positionVariable.renderTargets[gpu.currentTextureIndex === 0 ? 1 : 0].texture\n      uTextureVelocity.value = velocityVariable.renderTargets[gpu.currentTextureIndex].texture\n    },\n    render () {\n      effectComposer.render()\n    }\n    // onPointerMove ({ nPosition }) {\n    //   raycaster.setFromCamera(nPosition, camera)\n    //   camera.getWorldDirection(mousePlane.normal)\n    //   raycaster.ray.intersectPlane(mousePlane, mousePosition)\n    // },\n    // onPointerLeave () {\n    //   mousePosition.set(0, 0, 0)\n    // }\n  })\n\n  return { three: _three, config, uniforms, setColors }\n\n  /**\n   */\n  function initGPU (renderer) {\n    gpu = new GPUComputationRenderer(WIDTH, WIDTH, renderer)\n    if (!renderer.capabilities.isWebGL2) {\n      gpu.setDataType(HalfFloatType)\n    }\n\n    dtPosition = gpu.createTexture()\n    dtVelocity = gpu.createTexture()\n    initTextures(dtPosition, dtVelocity)\n\n    velocityVariable = gpu.addVariable('textureVelocity', `\n      ${psrdnoise}\n      uniform float uTime;\n      uniform vec3 uMouse;\n      uniform float uNoiseCoordScale;\n      uniform float uNoiseIntensity;\n      uniform float uMaxVelocity;\n      uniform float uAttractionRadius1;\n      uniform float uAttractionRadius2;\n\n      void main() {\n        vec2 uv = gl_FragCoord.xy / resolution.xy;\n        vec4 pos = texture2D(texturePosition, uv);\n        vec4 vel = texture2D(textureVelocity, uv);\n\n        vec3 grad;\n        float n = psrdnoise(pos.xyz * uNoiseCoordScale, vec3(0), uTime, grad);\n        vel.xyz += (pos.w * 0.75) * grad * uNoiseIntensity;\n\n        vec3 dv = -pos.xyz;\n        float coef = smoothstep(uAttractionRadius1, uAttractionRadius2, length(dv));\n        vel.xyz = vel.xyz + pos.w * coef * normalize(dv);\n        vel.xyz = clamp(vel.xyz, -uMaxVelocity, uMaxVelocity);\n\n        gl_FragColor = vel;\n      }\n    `, dtVelocity)\n\n    positionVariable = gpu.addVariable('texturePosition', `\n      ${psrdnoise}\n      uniform float uTime;\n      uniform vec3 uMouse;\n      void main() {\n        vec2 uv = gl_FragCoord.xy / resolution.xy;\n        vec4 pos = texture2D(texturePosition, uv);\n        vec4 vel = texture2D(textureVelocity, uv);\n        pos.xyz += vel.xyz;\n        gl_FragColor = pos;\n      }\n    `, dtPosition)\n\n    gpu.setVariableDependencies(velocityVariable, [positionVariable, velocityVariable])\n    gpu.setVariableDependencies(positionVariable, [positionVariable, velocityVariable])\n\n    Object.keys(commonUniforms).forEach(key => {\n      velocityVariable.material.uniforms[key] = uniforms[key]\n      positionVariable.material.uniforms[key] = uniforms[key]\n    })\n\n    const error = gpu.init()\n    if (error !== null) {\n      throw new Error(error)\n    }\n  }\n\n  /**\n   */\n  function initScene (scene) {\n    if (config.background !== undefined) {\n      scene.background = new Color(config.background)\n    }\n\n    initLights(scene, config.lights)\n\n    switch (config.geometry) {\n      case 'box' :\n        geometry = new BoxGeometry()\n        break\n      case 'capsule' :\n        geometry = new CapsuleGeometry(0.2, 1, 4, 8).rotateX(Math.PI / 2)\n        break\n      case 'cone' :\n        geometry = new ConeGeometry(0.4, 2, 6).rotateX(Math.PI / 2)\n        break\n      case 'octahedron':\n        geometry = new OctahedronGeometry(1, 0).rotateX(Math.PI / 2)\n        break\n      case 'sphere' :\n        geometry = new SphereGeometry(0.5, 8, 8)\n        break\n      default:\n        geometry = customGeometry(1)\n    }\n\n    const gpuUvs = new Float32Array(COUNT * 2)\n    let index = 0\n    for (let j = 0; j < WIDTH; j++) {\n      for (let i = 0; i < WIDTH; i++) {\n        gpuUvs[index++] = i / (WIDTH - 1)\n        gpuUvs[index++] = j / (WIDTH - 1)\n      }\n    }\n    geometry.setAttribute('gpuUv', new InstancedBufferAttribute(gpuUvs, 2))\n\n    material = new MeshStandardMaterial({\n      metalness: 0.75,\n      roughness: 0.25,\n      side: DoubleSide,\n      ...config.materialParams,\n      onBeforeCompile: shader => {\n        Object.keys(uniforms).forEach(key => {\n          shader.uniforms[key] = uniforms[key]\n        })\n        shader.vertexShader = `\n          uniform sampler2D uTexturePosition;\n          uniform sampler2D uOldTexturePosition;\n          uniform sampler2D uTextureVelocity;\n          uniform vec3 uScale;\n          attribute vec2 gpuUv;\n          varying vec4 vPos;\n          varying vec4 vVel;\n\n          mat3 lookAt(vec3 origin, vec3 target, vec3 up) {\n            vec3 z = target - origin;\n            if (z.x * z.x + z.y * z.y + z.z * z.z == 0.0) { z.z = 1.0; }\n            z = normalize(z);\n            vec3 x = cross(up, z);\n            if (x.x * x.x + x.y * x.y + x.z * x.z == 0.0) {\n              if (abs(up.z) == 1.0) { z.x += 0.0001; }\n              else { z.z += 0.0001; }\n              x = cross(up, z);\n            }\n            x = normalize(x);\n            vec3 y = cross(z, x);\n            return mat3(x, y, z);\n          }\n\n          mat4 iMatrix(vec3 pos, mat3 rmat, vec3 scale) {\n            return mat4(\n              rmat[0][0] * scale.x, rmat[0][1] * scale.x, rmat[0][2] * scale.x, 0.0,\n              rmat[1][0] * scale.y, rmat[1][1] * scale.y, rmat[1][2] * scale.y, 0.0,\n              rmat[2][0] * scale.z, rmat[2][1] * scale.z, rmat[2][2] * scale.z, 0.0,\n              pos.x, pos.y, pos.z, 1.0\n            );\n          }\n        ` + shader.vertexShader\n        shader.vertexShader = shader.vertexShader.replace('#include <defaultnormal_vertex>', `\n          vPos = texture2D(uTexturePosition, gpuUv);\n          vec4 oldPos = texture2D(uOldTexturePosition, gpuUv);\n          vVel = texture2D(uTextureVelocity, gpuUv);\n\n          mat3 rmat = lookAt(oldPos.xyz, vPos.xyz, vec3(0, 1, 0));\n          mat4 im = iMatrix(vPos.xyz, rmat, (0.5 + vPos.w) * uScale);\n\n          vec3 transformedNormal = objectNormal;\n          mat3 m = mat3(im);\n          transformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n          transformedNormal = m * transformedNormal;\n          transformedNormal = normalMatrix * transformedNormal;\n        `)\n        shader.vertexShader = shader.vertexShader.replace('#include <project_vertex>', `\n          vec4 mvPosition = modelViewMatrix * im * vec4(transformed, 1.0);\n          gl_Position = projectionMatrix * mvPosition;\n        `)\n      }\n    })\n\n    iMesh = new InstancedMesh(geometry, material, COUNT)\n    setColors(config.colors)\n    scene.add(iMesh)\n  }\n\n  /**\n   */\n  function setColors (colors) {\n    if (Array.isArray(colors) && colors.length > 1) {\n      const cscale = colorScale(colors)\n      for (let i = 0; i < COUNT; i++) {\n        iMesh.setColorAt(i, cscale.getColorAt(i / COUNT))\n      }\n      iMesh.instanceColor.needsUpdate = true\n    }\n  }\n\n  /**\n   */\n  function initTextures (texturePosition, textureVelocity) {\n    const dummy = new Vector3()\n    const posArray = texturePosition.image.data\n    const velArray = textureVelocity.image.data\n    for (let k = 0, kl = posArray.length; k < kl; k += 4) {\n      dummy.set(rndFS(1), rndFS(1), rndFS(1)).normalize().multiplyScalar(rndFS(config.attractionRadius1 * 2))\n      dummy.toArray(posArray, k)\n      posArray[k + 3] = rnd(0.1, 1)\n\n      // dummy.set(rndFS(1), rndFS(1), rndFS(1)).normalize().multiplyScalar(0.1)\n      dummy.set(0, 0, 0)\n      dummy.toArray(velArray, k)\n      velArray[k + 3] = 0\n    }\n  }\n}\n\nfunction customGeometry (size) {\n  const vertices = [\n    { p: [size * 0.5, 0, -size], n: [0, 1, 0] },\n    { p: [-size * 0.5, 0, -size], n: [0, 1, 0] },\n    { p: [0, 0, size], n: [0, 1, 0] },\n    { p: [0, -size * 0.5, -size], n: [1, 0, 0] },\n    { p: [0, size * 0.5, -size], n: [1, 0, 0] },\n    { p: [0, 0, size], n: [1, 0, 0] }\n  ]\n\n  const indexes = [0, 1, 2, 3, 4, 5]\n\n  const positions = []\n  const normals = []\n  for (const vertex of vertices) {\n    positions.push(...vertex.p)\n    normals.push(...vertex.n)\n  }\n\n  const geometry = new BufferGeometry()\n  geometry.setAttribute('position', new Float32BufferAttribute(positions, 3))\n  geometry.setAttribute('normal', new Float32BufferAttribute(normals, 3))\n  geometry.setIndex(indexes)\n\n  return geometry\n}\n","import { Color, DoubleSide, FogExp2, HalfFloatType, InstancedBufferAttribute, InstancedMesh, MathUtils, MeshBasicMaterial, MeshPhongMaterial, MeshStandardMaterial, PlaneGeometry, TextureLoader, Vector3 } from 'three'\nimport { GPUComputationRenderer } from 'three/examples/jsm/misc/GPUComputationRenderer.js'\n\nimport three, { commonConfig, initLights } from '../../three'\nimport psrdnoise from '../../glsl/psrdnoise3.glsl'\nimport { colorScale } from '../../tools/color'\n\nconst { randFloat: rnd, randFloatSpread: rndFS } = MathUtils\n\nconst defaultConfig = {\n  gpgpuSize: 64,\n  background: 0xffffff,\n  material: 'basic',\n  materialParams: {},\n  texture: null,\n  textureCount: 1,\n  colors: [0xffffff, 0xffffff],\n  lights: [\n    { type: 'ambient', params: [0xffffff, 0.5] },\n    { type: 'directional', params: [0xffffff, 0.5], props: { position: [20, 50, 100] } }\n  ],\n  fogDensity: 0.01,\n  fishScale: [1, 1, 1],\n  fishWidthSegments: 8,\n  fishSpeed: 1.5,\n  fishDisplacementScale: 0.2,\n  noiseCoordScale: 0.02,\n  noiseTimeCoef: 0.0005,\n  noiseIntensity: 0.0025,\n  attractionRadius1: 50,\n  attractionRadius2: 100,\n  maxVelocity: 0.1\n}\n\nexport default function (params) {\n  const config = { ...defaultConfig, ...params }\n\n  if (!['basic', 'phong', 'standard'].includes(config.material)) {\n    throw new Error(`Invalid material ${config.material}`)\n  }\n\n  if (!Number.isInteger(config.fishWidthSegments) || config.fishWidthSegments % 2 !== 0) {\n    throw new Error(`Invalid fishWidthSegments ${config.fishWidthSegments}`)\n  }\n\n  const WIDTH = config.gpgpuSize\n  const COUNT = WIDTH * WIDTH\n\n  let gpu\n  let dtPosition, dtVelocity\n  let velocityVariable, positionVariable\n\n  const uTexturePosition = { value: null }\n  const uOldTexturePosition = { value: null }\n  const uTextureVelocity = { value: null }\n  const uTime = { value: 0 }\n  const uNoiseCoordScale = { value: config.noiseCoordScale }\n  const uNoiseIntensity = { value: config.noiseIntensity }\n  const uMaxVelocity = { value: config.maxVelocity }\n  const uAttractionRadius1 = { value: config.attractionRadius1 }\n  const uAttractionRadius2 = { value: config.attractionRadius2 }\n  const uFishScale = { value: new Vector3(...config.fishScale) }\n  const uFishSpeed = { value: config.fishSpeed }\n  const uFishDisplacementScale = { value: config.fishDisplacementScale }\n\n  const gpuTexturesUniforms = { uTexturePosition, uOldTexturePosition, uTextureVelocity }\n  const commonUniforms = { uTime, uNoiseCoordScale, uNoiseIntensity, uMaxVelocity, uAttractionRadius1, uAttractionRadius2, uFishScale, uFishSpeed, uFishDisplacementScale }\n  const uniforms = { ...gpuTexturesUniforms, ...commonUniforms }\n\n  let geometry, material, iMesh\n\n  const _three = three({\n    ...commonConfig(params),\n    antialias: true,\n    orbitControls: true,\n    initRenderer ({ renderer }) {\n      initGPU(renderer)\n    },\n    initCamera ({ camera }) {\n      camera.position.set(0, 20, 70)\n    },\n    initScene ({ scene }) {\n      initScene(scene)\n    },\n    beforeRender ({ clock }) {\n      uTime.value = clock.time * config.noiseTimeCoef\n\n      gpu.compute()\n      uTexturePosition.value = positionVariable.renderTargets[gpu.currentTextureIndex].texture\n      uOldTexturePosition.value = positionVariable.renderTargets[gpu.currentTextureIndex === 0 ? 1 : 0].texture\n      uTextureVelocity.value = velocityVariable.renderTargets[gpu.currentTextureIndex].texture\n    }\n  })\n\n  return { three: _three, config, uniforms, setColors }\n\n  /**\n   */\n  function initGPU (renderer) {\n    gpu = new GPUComputationRenderer(WIDTH, WIDTH, renderer)\n    if (!renderer.capabilities.isWebGL2) {\n      gpu.setDataType(HalfFloatType)\n    }\n\n    dtPosition = gpu.createTexture()\n    dtVelocity = gpu.createTexture()\n    initTextures(dtPosition, dtVelocity)\n\n    velocityVariable = gpu.addVariable('textureVelocity', `\n      ${psrdnoise}\n      uniform float uTime;\n      uniform float uNoiseCoordScale;\n      uniform float uNoiseIntensity;\n      uniform float uMaxVelocity;\n      uniform float uAttractionRadius1;\n      uniform float uAttractionRadius2;\n      uniform float uFishSpeed;\n      void main() {\n        vec2 uv = gl_FragCoord.xy / resolution.xy;\n        vec4 pos = texture2D(texturePosition, uv);\n        vec4 vel = texture2D(textureVelocity, uv);\n\n        vec3 grad;\n        float n = psrdnoise(pos.xyz * uNoiseCoordScale, vec3(0), uTime, grad);\n        grad = grad * uNoiseIntensity;\n        vel.xyz = vel.xyz + (pos.w * 0.75) * grad;\n\n        vec3 dv = -pos.xyz;\n        float coef = smoothstep(uAttractionRadius1, uAttractionRadius2, length(dv));\n        vel.xyz = vel.xyz + pos.w * coef * normalize(dv);\n        vel.xyz = clamp(vel.xyz, -uMaxVelocity, uMaxVelocity);\n\n        vel.w = mod(vel.w + length(vel.xyz) * (0.5 + pos.w) * uFishSpeed, 6.2831853071);\n        gl_FragColor = vel;\n      }\n    `, dtVelocity)\n\n    positionVariable = gpu.addVariable('texturePosition', `\n      ${psrdnoise}\n      uniform float uTime;\n      void main() {\n        vec2 uv = gl_FragCoord.xy / resolution.xy;\n        vec4 pos = texture2D(texturePosition, uv);\n        vec4 vel = texture2D(textureVelocity, uv);\n        pos.xyz += vel.xyz;\n        gl_FragColor = pos;\n      }\n    `, dtPosition)\n\n    gpu.setVariableDependencies(velocityVariable, [positionVariable, velocityVariable])\n    gpu.setVariableDependencies(positionVariable, [positionVariable, velocityVariable])\n\n    Object.keys(commonUniforms).forEach(key => {\n      velocityVariable.material.uniforms[key] = uniforms[key]\n      positionVariable.material.uniforms[key] = uniforms[key]\n    })\n\n    const error = gpu.init()\n    if (error !== null) {\n      throw new Error(error)\n    }\n  }\n\n  /**\n   */\n  function initScene (scene) {\n    if (config.background !== undefined) {\n      scene.background = new Color(config.background)\n      if (config.fogDensity) scene.fog = new FogExp2(config.background, config.fogDensity)\n    }\n\n    initLights(scene, config.lights)\n\n    geometry = new PlaneGeometry(2, 1, config.fishWidthSegments, 1).rotateY(Math.PI / 2)\n\n    const gpuUvs = new Float32Array(COUNT * 2)\n    const mapIndexes = new Float32Array(COUNT)\n    let i1 = 0\n    let i2 = 0\n    for (let j = 0; j < WIDTH; j++) {\n      for (let i = 0; i < WIDTH; i++) {\n        gpuUvs[i1++] = i / (WIDTH - 1)\n        gpuUvs[i1++] = j / (WIDTH - 1)\n        mapIndexes[i2++] = Math.floor(Math.random() * config.textureCount)\n      }\n    }\n    geometry.setAttribute('gpuUv', new InstancedBufferAttribute(gpuUvs, 2))\n    geometry.setAttribute('mapIndex', new InstancedBufferAttribute(mapIndexes, 1))\n\n    const materialParams = { side: DoubleSide, ...config.materialParams }\n    if (config.texture) {\n      materialParams.map = new TextureLoader().load(config.texture)\n    }\n\n    materialParams.onBeforeCompile = shader => {\n      shader.defines = {\n        COMPUTE_NORMALS: config.material !== 'basic',\n        FISH_DZ: (2.0 / config.fishWidthSegments).toFixed(10),\n        TEXTURE_COUNT: config.textureCount.toFixed(10)\n      }\n      Object.keys(uniforms).forEach(key => {\n        shader.uniforms[key] = uniforms[key]\n      })\n      shader.vertexShader = `\n        uniform sampler2D uTexturePosition;\n        uniform sampler2D uOldTexturePosition;\n        uniform sampler2D uTextureVelocity;\n        uniform vec3 uFishScale;\n        uniform float uFishDisplacementScale;\n        attribute vec2 gpuUv;\n        attribute float mapIndex;\n        varying vec4 vPos;\n        varying vec4 vVel;\n        varying float vMapIndex;\n\n        mat3 lookAt(vec3 origin, vec3 target, vec3 up) {\n          vec3 z = target - origin;\n          if (z.x * z.x + z.y * z.y + z.z * z.z == 0.0) { z.z = 1.0; }\n          z = normalize(z);\n          vec3 x = cross(up, z);\n          if (x.x * x.x + x.y * x.y + x.z * x.z == 0.0) {\n            if (abs(up.z) == 1.0) { z.x += 0.0001; }\n            else { z.z += 0.0001; }\n            x = cross(up, z);\n          }\n          x = normalize(x);\n          vec3 y = cross(z, x);\n          return mat3(x, y, z);\n        }\n\n        mat4 iMatrix(vec3 pos, mat3 rmat, vec3 scale) {\n          return mat4(\n            rmat[0][0] * scale.x, rmat[0][1] * scale.x, rmat[0][2] * scale.x, 0.0,\n            rmat[1][0] * scale.y, rmat[1][1] * scale.y, rmat[1][2] * scale.y, 0.0,\n            rmat[2][0] * scale.z, rmat[2][1] * scale.z, rmat[2][2] * scale.z, 0.0,\n            pos.x, pos.y, pos.z, 1.0\n          );\n        }\n      ` + shader.vertexShader\n      shader.vertexShader = shader.vertexShader.replace('#include <defaultnormal_vertex>', '')\n      shader.vertexShader = shader.vertexShader.replace('#include <normal_vertex>', '')\n      shader.vertexShader = shader.vertexShader.replace('#include <begin_vertex>', `\n        vPos = texture2D(uTexturePosition, gpuUv);\n        vec4 oldPos = texture2D(uOldTexturePosition, gpuUv);\n        vVel = texture2D(uTextureVelocity, gpuUv);\n        vMapIndex = float(mapIndex);\n\n        mat3 rmat = lookAt(oldPos.xyz, vPos.xyz, vec3(0, 1, 0));\n        mat4 im = iMatrix(vPos.xyz, rmat, (0.5 + vPos.w) * uFishScale);\n\n        vec3 transformed = vec3(position);\n\n        #ifdef COMPUTE_NORMALS\n          vec3 transformedNormal = objectNormal; \n        #endif\n\n        float dz = transformed.z + 1.0;\n        float sdz = smoothstep(2.0, 0.0, dz);\n        transformed.x += sin(vVel.w + dz * PI * 1.5) * sdz * uFishDisplacementScale;\n\n        #ifdef COMPUTE_NORMALS\n          float dz1 = dz - 0.2;\n          float sdz1 = smoothstep(2.0, 0.0, dz1);\n          float dx1 = sin(vVel.w + dz1 * PI * 1.5) * sdz1 * uFishDisplacementScale - transformed.x;\n          vec3 v1 = vec3(dx1, 0.0, -FISH_DZ);\n          vec3 v2 = vec3(0.0, 1.0, 0.0);\n          transformedNormal = normalize(cross(v1, v2));\n        #endif\n\n        #ifdef COMPUTE_NORMALS\n          #ifdef USE_INSTANCING\n            mat3 m = mat3( im );\n            transformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n            transformedNormal = m * transformedNormal;\n          #endif\n          transformedNormal = normalMatrix * transformedNormal;\n          #ifdef FLIP_SIDED\n            transformedNormal = - transformedNormal;\n          #endif\n          #ifdef USE_TANGENT\n            vec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n            #ifdef FLIP_SIDED\n              transformedTangent = - transformedTangent;\n            #endif\n          #endif\n          #ifndef FLAT_SHADED\n            vNormal = normalize( transformedNormal );\n            #ifdef USE_TANGENT\n              vTangent = normalize( transformedTangent );\n              vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n            #endif\n          #endif\n        #endif\n      `)\n\n      shader.vertexShader = shader.vertexShader.replace('#include <project_vertex>', `\n        vec4 mvPosition = vec4( transformed, 1.0 );\n        #ifdef USE_INSTANCING\n          mvPosition = im * mvPosition;\n        #endif\n        mvPosition = modelViewMatrix * mvPosition;\n        gl_Position = projectionMatrix * mvPosition;\n      `)\n\n      shader.fragmentShader = `\n        varying float vMapIndex;\n      ` + shader.fragmentShader\n      shader.fragmentShader = shader.fragmentShader.replace('#include <map_fragment>', `\n        #ifdef USE_MAP\n          vec2 uv = vUv;\n          uv.x = (vMapIndex + vUv.x) / TEXTURE_COUNT;\n          vec4 sampledDiffuseColor = texture2D(map, uv);\n          diffuseColor *= sampledDiffuseColor;\n        #endif\n      `)\n    }\n\n    switch (config.material) {\n      case 'standard' :\n        material = new MeshStandardMaterial(materialParams)\n        break\n      case 'phong' :\n        material = new MeshPhongMaterial(materialParams)\n        break\n      default :\n        material = new MeshBasicMaterial(materialParams)\n    }\n\n    iMesh = new InstancedMesh(geometry, material, COUNT)\n    setColors(config.colors)\n    scene.add(iMesh)\n  }\n\n  function setColors (colors) {\n    if (Array.isArray(colors) && colors.length > 1) {\n      const cscale = colorScale(colors)\n      for (let i = 0; i < COUNT; i++) {\n        iMesh.setColorAt(i, cscale.getColorAt(i / COUNT))\n      }\n      iMesh.instanceColor.needsUpdate = true\n    }\n  }\n\n  /**\n   */\n  function initTextures (texturePosition, textureVelocity) {\n    const posArray = texturePosition.image.data\n    const velArray = textureVelocity.image.data\n    for (let k = 0, kl = posArray.length; k < kl; k += 4) {\n      posArray[k + 0] = rndFS(100)\n      posArray[k + 1] = rndFS(100)\n      posArray[k + 2] = rndFS(100)\n      posArray[k + 3] = rnd(0.1, 1)\n\n      velArray[k + 0] = rndFS(0.5)\n      velArray[k + 1] = rndFS(0.5)\n      velArray[k + 2] = rndFS(0.5)\n      velArray[k + 3] = 0\n    }\n  }\n}\n"],"names":["commonConfig","defaultConfig","rnd","rndFS","psrdnoise"],"mappings":"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"}},
    {"offset": {"line": 2295, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2300, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/@swc/helpers/cjs/_interop_require_default.cjs"],"sourcesContent":["\"use strict\";\n\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : { default: obj };\n}\nexports._ = _interop_require_default;\n"],"names":[],"mappings":"AAAA;AAEA,SAAS,yBAAyB,GAAG;IACjC,OAAO,OAAO,IAAI,UAAU,GAAG,MAAM;QAAE,SAAS;IAAI;AACxD;AACA,QAAQ,CAAC,GAAG"}},
    {"offset": {"line": 2307, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}