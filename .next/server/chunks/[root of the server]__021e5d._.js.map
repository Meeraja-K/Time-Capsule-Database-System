{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 143, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/data/db.ts"],"sourcesContent":["import mysql from 'mysql2/promise';\r\n\r\n// Create a connection pool for MySQL\r\nconst pool = mysql.createPool({\r\n  host: process.env.DB_HOST || 'localhost', // Replace with your MySQL host\r\n  user: process.env.DB_USER || 'root', // Replace with your MySQL username\r\n  password: process.env.DB_PASSWORD || '#InsideOut6', // Replace with your MySQL password\r\n  database: process.env.DB_NAME || 'timecapsuledbs', // Replace with your database name\r\n  waitForConnections: true,\r\n  connectionLimit: 10,\r\n  queueLimit: 0,\r\n});\r\n\r\nexport default pool;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,qCAAqC;AACrC,MAAM,OAAO,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;IAC5B,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,UAAU,QAAQ,GAAG,CAAC,WAAW,IAAI;IACrC,UAAU,QAAQ,GAAG,CAAC,OAAO,IAAI;IACjC,oBAAoB;IACpB,iBAAiB;IACjB,YAAY;AACd;uCAEe"}},
    {"offset": {"line": 159, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 165, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/app/api/audit-logs/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport db from \"../../../data/db\"; // Update this path as needed\r\n\r\nexport async function GET(req: Request) {\r\n  try {\r\n    const url = new URL(req.url);\r\n    const username = url.searchParams.get(\"username\");\r\n\r\n    if (!username) {\r\n      return NextResponse.json(\r\n        { error: \"Username is required.\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Fetch the user_id using the username\r\n    const [userRows]: [any[], any] = await db.query(\r\n      `SELECT user_id FROM users WHERE username = ?`,\r\n      [username]\r\n    );\r\n\r\n    if (userRows.length === 0) {\r\n      return NextResponse.json(\r\n        { error: \"User not found.\" },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    const user_id = userRows[0].user_id;\r\n\r\n    // Fetch the audit logs for the user_id\r\n    const [logRows]: [any[], any] = await db.query(\r\n      `\r\n      SELECT al.log_id, al.user_id, al.action_type, al.capsule_id, al.timestamp,\r\n             tc.capsule_name,\r\n             GROUP_CONCAT(DISTINCT su.shared_username ORDER BY su.shared_username ASC) AS shared_usernames\r\n      FROM audit_logs al\r\n      LEFT JOIN time_capsules tc ON al.capsule_id = tc.capsule_id\r\n      LEFT JOIN shared_users su ON al.capsule_id = su.capsule_id\r\n      WHERE al.user_id = ?\r\n      GROUP BY al.log_id, al.user_id, al.action_type, al.capsule_id, al.timestamp, tc.capsule_name\r\n      ORDER BY al.timestamp DESC`, \r\n      [user_id]\r\n    );\r\n\r\n    const [receivedCapsules]: [any[], any] = await db.query(\r\n        `\r\n        SELECT rc.received_id, rc.capsule_id, rc.shared_by_username, rc.received_at, tc.capsule_name\r\n        FROM received_capsules rc\r\n        LEFT JOIN time_capsules tc ON rc.capsule_id = tc.capsule_id\r\n        WHERE rc.receiver_username = ?\r\n        ORDER BY rc.received_at DESC`,\r\n        [username]\r\n      );\r\n  \r\n\r\n    if (logRows.length === 0) {\r\n      return NextResponse.json(\r\n        { error: \"No logs found for the user.\" },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    // Return the logs\r\n    return NextResponse.json(\r\n        {\r\n          logs: logRows,\r\n          receivedCapsules,\r\n        },\r\n        { status: 200 }\r\n      );\r\n  } catch (error) {\r\n    console.error(\"Error fetching audit logs:\", error);\r\n    return NextResponse.json(\r\n      { error: \"Internal server error.\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA,qMAAmC,6BAA6B;;;AAEzD,eAAe,IAAI,GAAY;IACpC,IAAI;QACF,MAAM,MAAM,IAAI,IAAI,IAAI,GAAG;QAC3B,MAAM,WAAW,IAAI,YAAY,CAAC,GAAG,CAAC;QAEtC,IAAI,CAAC,UAAU;YACb,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAwB,GACjC;gBAAE,QAAQ;YAAI;QAElB;QAEA,uCAAuC;QACvC,MAAM,CAAC,SAAS,GAAiB,MAAM,mHAAA,CAAA,UAAE,CAAC,KAAK,CAC7C,CAAC,4CAA4C,CAAC,EAC9C;YAAC;SAAS;QAGZ,IAAI,SAAS,MAAM,KAAK,GAAG;YACzB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAkB,GAC3B;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,UAAU,QAAQ,CAAC,EAAE,CAAC,OAAO;QAEnC,uCAAuC;QACvC,MAAM,CAAC,QAAQ,GAAiB,MAAM,mHAAA,CAAA,UAAE,CAAC,KAAK,CAC5C,CAAC;;;;;;;;;gCASyB,CAAC,EAC3B;YAAC;SAAQ;QAGX,MAAM,CAAC,iBAAiB,GAAiB,MAAM,mHAAA,CAAA,UAAE,CAAC,KAAK,CACnD,CAAC;;;;;oCAK2B,CAAC,EAC7B;YAAC;SAAS;QAId,IAAI,QAAQ,MAAM,KAAK,GAAG;YACxB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA8B,GACvC;gBAAE,QAAQ;YAAI;QAElB;QAEA,kBAAkB;QAClB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;YACE,MAAM;YACN;QACF,GACA;YAAE,QAAQ;QAAI;IAEpB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAyB,GAClC;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 239, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}